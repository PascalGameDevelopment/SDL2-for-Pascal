
{$IFDEF SDL_RUNTIME_LOADING}

Var
  LibHandle: TLibHandle = 0;

Function SDL_LoadLib(LibFilename: String): Boolean;
Begin
  result := false;
  SDL_UnLoadLib();
  If LibFilename = '' Then
    LibFilename := SDL_LibName;
  LibHandle := LoadLibrary(LibFilename);
  If LibHandle <> 0 Then Begin
    (*
     * Das hier ist nicht mal Ansatzweise fertig, aber es reicht um SDL2 zu initialisieren und einen Joystick ab zu fragen ;)
     *)
    result := true;

    SDL_Init := TSDL_Init_func(GetProcAddress(LibHandle, 'SDL_Init'));
    If Not assigned(SDL_Init) Then result := false;
    SDL_InitSubSystem := TSDL_InitSubSystem_func(GetProcAddress(LibHandle, 'SDL_InitSubSystem'));
    If Not assigned(SDL_InitSubSystem) Then result := false;
    SDL_QuitSubSystem := TSDL_QuitSubSystem_proc(GetProcAddress(LibHandle, 'SDL_QuitSubSystem'));
    If Not assigned(SDL_QuitSubSystem) Then result := false;
    SDL_WasInit := TSDL_WasInit_func(GetProcAddress(LibHandle, 'SDL_WasInit'));
    If Not assigned(SDL_WasInit) Then result := false;
    SDL_Quit := TSDL_Quit_proc(GetProcAddress(LibHandle, 'SDL_Quit'));
    If Not assigned(SDL_Quit) Then result := false;
    SDL_GetAudioDriver := TSDL_GetAudioDriver_func(GetProcAddress(LibHandle, 'SDL_GetAudioDriver'));
    If Not assigned(SDL_GetAudioDriver) Then result := false;
    SDL_AudioInit := TSDL_AudioInit_func(GetProcAddress(LibHandle, 'SDL_AudioInit'));
    If Not assigned(SDL_AudioInit) Then result := false;
    SDL_OpenAudio := TSDL_OpenAudio_func(GetProcAddress(LibHandle, 'SDL_OpenAudio'));
    If Not assigned(SDL_OpenAudio) Then result := false;
    SDL_GetNumAudioDevices := TSDL_GetNumAudioDevices_func(GetProcAddress(LibHandle, 'SDL_GetNumAudioDevices'));
    If Not assigned(SDL_GetNumAudioDevices) Then result := false;
    SDL_GetAudioDeviceName := TSDL_GetAudioDeviceName_func(GetProcAddress(LibHandle, 'SDL_GetAudioDeviceName'));
    If Not assigned(SDL_GetAudioDeviceName) Then result := false;
    //SDL_GetAudioDeviceSpec := TSDL_GetAudioDeviceSpec_func(GetProcAddress(LibHandle, 'SDL_GetAudioDeviceSpec')); // TODO: Das geht nicht, warum ?
    //If Not assigned(SDL_GetAudioDeviceSpec) Then result := false;
    //SDL_GetDefaultAudioInfo := TSDL_GetDefaultAudioInfo_func(GetProcAddress(LibHandle, 'SDL_GetDefaultAudioInfo')); // TODO: Das geht nicht, warum ?
    //If Not assigned(SDL_GetDefaultAudioInfo) Then result := false;
    SDL_OpenAudioDevice := TSDL_OpenAudioDevice_func(GetProcAddress(LibHandle, 'SDL_OpenAudioDevice'));
    If Not assigned(SDL_OpenAudioDevice) Then result := false;
    SDL_GetAudioDeviceStatus := TSDL_GetAudioDeviceStatus_func(GetProcAddress(LibHandle, 'SDL_GetAudioDeviceStatus'));
    If Not assigned(SDL_GetAudioDeviceStatus) Then result := false;
    SDL_PauseAudio := TSDL_PauseAudio_proc(GetProcAddress(LibHandle, 'SDL_PauseAudio'));
    If Not assigned(SDL_PauseAudio) Then result := false;
    SDL_PauseAudioDevice := TSDL_PauseAudioDevice_proc(GetProcAddress(LibHandle, 'SDL_PauseAudioDevice'));
    If Not assigned(SDL_PauseAudioDevice) Then result := false;
    SDL_LoadWAV_RW := TSDL_LoadWAV_RW_func(GetProcAddress(LibHandle, 'SDL_LoadWAV_RW'));
    If Not assigned(SDL_LoadWAV_RW) Then result := false;
    SDL_FreeWAV := TSDL_FreeWAV_proc(GetProcAddress(LibHandle, 'SDL_FreeWAV'));
    If Not assigned(SDL_FreeWAV) Then result := false;
    SDL_BuildAudioCVT := TSDL_BuildAudioCVT_func(GetProcAddress(LibHandle, 'SDL_BuildAudioCVT'));
    If Not assigned(SDL_BuildAudioCVT) Then result := false;
    SDL_ConvertAudio := TSDL_ConvertAudio_func(GetProcAddress(LibHandle, 'SDL_ConvertAudio'));
    If Not assigned(SDL_ConvertAudio) Then result := false;
    SDL_NewAudioStream := TSDL_NewAudioStream_func(GetProcAddress(LibHandle, 'SDL_NewAudioStream'));
    If Not assigned(SDL_NewAudioStream) Then result := false;
    SDL_AudioStreamPut := TSDL_AudioStreamPut_func(GetProcAddress(LibHandle, 'SDL_AudioStreamPut'));
    If Not assigned(SDL_AudioStreamPut) Then result := false;
    SDL_AudioStreamGet := TSDL_AudioStreamGet_func(GetProcAddress(LibHandle, 'SDL_AudioStreamGet'));
    If Not assigned(SDL_AudioStreamGet) Then result := false;
    SDL_AudioStreamAvailable := TSDL_AudioStreamAvailable_func(GetProcAddress(LibHandle, 'SDL_AudioStreamAvailable'));
    If Not assigned(SDL_AudioStreamAvailable) Then result := false;
    SDL_AudioStreamFlush := TSDL_AudioStreamFlush_func(GetProcAddress(LibHandle, 'SDL_AudioStreamFlush'));
    If Not assigned(SDL_AudioStreamFlush) Then result := false;
    SDL_AudioStreamClear := TSDL_AudioStreamClear_proc(GetProcAddress(LibHandle, 'SDL_AudioStreamClear'));
    If Not assigned(SDL_AudioStreamClear) Then result := false;
    SDL_FreeAudioStream := TSDL_FreeAudioStream_proc(GetProcAddress(LibHandle, 'SDL_FreeAudioStream'));
    If Not assigned(SDL_FreeAudioStream) Then result := false;
    SDL_MixAudio := TSDL_MixAudio_proc(GetProcAddress(LibHandle, 'SDL_MixAudio'));
    If Not assigned(SDL_MixAudio) Then result := false;
    SDL_MixAudioFormat := TSDL_MixAudioFormat_proc(GetProcAddress(LibHandle, 'SDL_MixAudioFormat'));
    If Not assigned(SDL_MixAudioFormat) Then result := false;
    SDL_QueueAudio := TSDL_QueueAudio_func(GetProcAddress(LibHandle, 'SDL_QueueAudio'));
    If Not assigned(SDL_QueueAudio) Then result := false;
    SDL_DequeueAudio := TSDL_DequeueAudio_func(GetProcAddress(LibHandle, 'SDL_DequeueAudio'));
    If Not assigned(SDL_DequeueAudio) Then result := false;
    SDL_GetQueuedAudioSize := TSDL_GetQueuedAudioSize_func(GetProcAddress(LibHandle, 'SDL_GetQueuedAudioSize'));
    If Not assigned(SDL_GetQueuedAudioSize) Then result := false;
    SDL_ClearQueuedAudio := TSDL_ClearQueuedAudio_proc(GetProcAddress(LibHandle, 'SDL_ClearQueuedAudio'));
    If Not assigned(SDL_ClearQueuedAudio) Then result := false;
    SDL_LockAudioDevice := TSDL_LockAudioDevice_proc(GetProcAddress(LibHandle, 'SDL_LockAudioDevice'));
    If Not assigned(SDL_LockAudioDevice) Then result := false;
    SDL_UnlockAudioDevice := TSDL_UnlockAudioDevice_proc(GetProcAddress(LibHandle, 'SDL_UnlockAudioDevice'));
    If Not assigned(SDL_UnlockAudioDevice) Then result := false;
    SDL_CloseAudioDevice := TSDL_CloseAudioDevice_proc(GetProcAddress(LibHandle, 'SDL_CloseAudioDevice'));
    If Not assigned(SDL_CloseAudioDevice) Then result := false;
    SDL_ComposeCustomBlendMode := TSDL_ComposeCustomBlendMode_func(GetProcAddress(LibHandle, 'SDL_ComposeCustomBlendMode'));
    If Not assigned(SDL_ComposeCustomBlendMode) Then result := false;
    SDL_SetClipboardText := TSDL_SetClipboardText_func(GetProcAddress(LibHandle, 'SDL_SetClipboardText'));
    If Not assigned(SDL_SetClipboardText) Then result := false;
    SDL_GetClipboardText := TSDL_GetClipboardText_func(GetProcAddress(LibHandle, 'SDL_GetClipboardText'));
    If Not assigned(SDL_GetClipboardText) Then result := false;
    SDL_HasClipboardText := TSDL_HasClipboardText_func(GetProcAddress(LibHandle, 'SDL_HasClipboardText'));
    If Not assigned(SDL_HasClipboardText) Then result := false;
    //SDL_SetPrimarySelectionText := TSDL_SetPrimarySelectionText_func(GetProcAddress(LibHandle, 'SDL_SetPrimarySelectionText')); // TODO: Das geht nicht, warum ?
    //If Not assigned(SDL_SetPrimarySelectionText) Then result := false;
    //SDL_GetPrimarySelectionText := TSDL_GetPrimarySelectionText_func(GetProcAddress(LibHandle, 'SDL_GetPrimarySelectionText'));
    //If Not assigned(SDL_GetPrimarySelectionText) Then result := false;
    //SDL_HasPrimarySelectionText := TSDL_HasPrimarySelectionText_func(GetProcAddress(LibHandle, 'SDL_HasPrimarySelectionText'));
    //If Not assigned(SDL_HasPrimarySelectionText) Then result := false;
    SDL_GetCPUCount := TSDL_GetCPUCount_func(GetProcAddress(LibHandle, 'SDL_GetCPUCount'));
    If Not assigned(SDL_GetCPUCount) Then result := false;
    SDL_SetError := TSDL_SetError_func(GetProcAddress(LibHandle, 'SDL_SetError'));
    If Not assigned(SDL_SetError) Then result := false;
    //SDL_GetErrorMsg := TSDL_GetErrorMsg_func(GetProcAddress(LibHandle, 'SDL_GetErrorMsg'));
    //If Not assigned(SDL_GetErrorMsg) Then result := false;
    SDL_Error := TSDL_Error_func(GetProcAddress(LibHandle, 'SDL_Error'));
    If Not assigned(SDL_Error) Then result := false;
    SDL_GetBasePath := TSDL_GetBasePath_func(GetProcAddress(LibHandle, 'SDL_GetBasePath'));
    If Not assigned(SDL_GetBasePath) Then result := false;
    SDL_GetPrefPath := TSDL_GetPrefPath_func(GetProcAddress(LibHandle, 'SDL_GetPrefPath'));
    If Not assigned(SDL_GetPrefPath) Then result := false;
    SDL_GameControllerAddMappingsFromRW := TSDL_GameControllerAddMappingsFromRW_func(GetProcAddress(LibHandle, 'SDL_GameControllerAddMappingsFromRW'));
    If Not assigned(SDL_GameControllerAddMappingsFromRW) Then result := false;
    SDL_GameControllerNumMappings := TSDL_GameControllerNumMappings_func(GetProcAddress(LibHandle, 'SDL_GameControllerNumMappings'));
    If Not assigned(SDL_GameControllerNumMappings) Then result := false;
    SDL_GameControllerMappingForIndex := TSDL_GameControllerMappingForIndex_func(GetProcAddress(LibHandle, 'SDL_GameControllerMappingForIndex'));
    If Not assigned(SDL_GameControllerMappingForIndex) Then result := false;
    //SDL_GameControllerPathForIndex := TSDL_GameControllerPathForIndex_func(GetProcAddress(LibHandle, 'SDL_GameControllerPathForIndex'));
    //If Not assigned(SDL_GameControllerPathForIndex) Then result := false;
    SDL_GameControllerTypeForIndex := TSDL_GameControllerTypeForIndex_func(GetProcAddress(LibHandle, 'SDL_GameControllerTypeForIndex'));
    If Not assigned(SDL_GameControllerTypeForIndex) Then result := false;
    SDL_GameControllerMappingForDeviceIndex := TSDL_GameControllerMappingForDeviceIndex_func(GetProcAddress(LibHandle, 'SDL_GameControllerMappingForDeviceIndex'));
    If Not assigned(SDL_GameControllerMappingForDeviceIndex) Then result := false;
    SDL_GameControllerFromInstanceID := TSDL_GameControllerFromInstanceID_func(GetProcAddress(LibHandle, 'SDL_GameControllerFromInstanceID'));
    If Not assigned(SDL_GameControllerFromInstanceID) Then result := false;
    SDL_GameControllerFromPlayerIndex := TSDL_GameControllerFromPlayerIndex_func(GetProcAddress(LibHandle, 'SDL_GameControllerFromPlayerIndex'));
    If Not assigned(SDL_GameControllerFromPlayerIndex) Then result := false;
    //SDL_GameControllerPath := TSDL_GameControllerPath_func(GetProcAddress(LibHandle, 'SDL_GameControllerPath'));
    //If Not assigned(SDL_GameControllerPath) Then result := false;
    SDL_GameControllerGetType := TSDL_GameControllerGetType_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetType'));
    If Not assigned(SDL_GameControllerGetType) Then result := false;
    SDL_GameControllerGetPlayerIndex := TSDL_GameControllerGetPlayerIndex_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetPlayerIndex'));
    If Not assigned(SDL_GameControllerGetPlayerIndex) Then result := false;
    SDL_GameControllerSetPlayerIndex := TSDL_GameControllerSetPlayerIndex_proc(GetProcAddress(LibHandle, 'SDL_GameControllerSetPlayerIndex'));
    If Not assigned(SDL_GameControllerSetPlayerIndex) Then result := false;
    SDL_GameControllerGetVendor := TSDL_GameControllerGetVendor_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetVendor'));
    If Not assigned(SDL_GameControllerGetVendor) Then result := false;
    SDL_GameControllerGetProduct := TSDL_GameControllerGetProduct_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetProduct'));
    If Not assigned(SDL_GameControllerGetProduct) Then result := false;
    SDL_GameControllerGetProductVersion := TSDL_GameControllerGetProductVersion_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetProductVersion'));
    If Not assigned(SDL_GameControllerGetProductVersion) Then result := false;
    //SDL_GameControllerGetFirmwareVersion := TSDL_GameControllerGetFirmwareVersion_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetFirmwareVersion'));
    //If Not assigned(SDL_GameControllerGetFirmwareVersion) Then result := false;
    //SDL_GameControllerGetSerial := TSDL_GameControllerGetSerial_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetSerial'));
    //If Not assigned(SDL_GameControllerGetSerial) Then result := false;
    //SDL_GameControllerGetSteamHandle := TSDL_GameControllerGetSteamHandle_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetSteamHandle'));
    //If Not assigned(SDL_GameControllerGetSteamHandle) Then result := false;
    //SDL_GameControllerHasAxis := TSDL_GameControllerHasAxis_func(GetProcAddress(LibHandle, 'SDL_GameControllerHasAxis'));
    //If Not assigned(SDL_GameControllerHasAxis) Then result := false;
    //SDL_GameControllerHasButton := TSDL_GameControllerHasButton_func(GetProcAddress(LibHandle, 'SDL_GameControllerHasButton'));
    //If Not assigned(SDL_GameControllerHasButton) Then result := false;
    //SDL_GameControllerGetNumTouchpads := TSDL_GameControllerGetNumTouchpads_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetNumTouchpads'));
    //If Not assigned(SDL_GameControllerGetNumTouchpads) Then result := false;
    //SDL_GameControllerGetNumTouchpadFingers := TSDL_GameControllerGetNumTouchpadFingers_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetNumTouchpadFingers'));
    //If Not assigned(SDL_GameControllerGetNumTouchpadFingers) Then result := false;
    //SDL_GameControllerGetTouchpadFinger := TSDL_GameControllerGetTouchpadFinger_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetTouchpadFinger'));
    //If Not assigned(SDL_GameControllerGetTouchpadFinger) Then result := false;
    //SDL_GameControllerHasSensor := TSDL_GameControllerHasSensor_func(GetProcAddress(LibHandle, 'SDL_GameControllerHasSensor'));
    //If Not assigned(SDL_GameControllerHasSensor) Then result := false;
    //SDL_GameControllerSetSensorEnabled := TSDL_GameControllerSetSensorEnabled_func(GetProcAddress(LibHandle, 'SDL_GameControllerSetSensorEnabled'));
    //If Not assigned(SDL_GameControllerSetSensorEnabled) Then result := false;
    //SDL_GameControllerIsSensorEnabled := TSDL_GameControllerIsSensorEnabled_func(GetProcAddress(LibHandle, 'SDL_GameControllerIsSensorEnabled'));
    //If Not assigned(SDL_GameControllerIsSensorEnabled) Then result := false;
    (*SDL_GameControllerGetSensorDataRate := TSDL_GameControllerGetSensorDataRate_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetSensorDataRate'));
    If Not assigned(SDL_GameControllerGetSensorDataRate) Then result := false;
    SDL_GameControllerGetSensorData := TSDL_GameControllerGetSensorData_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetSensorData'));
    If Not assigned(SDL_GameControllerGetSensorData) Then result := false;
    SDL_GameControllerGetSensorDataWithTimestamp := TSDL_GameControllerGetSensorDataWithTimestamp_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetSensorDataWithTimestamp'));
    If Not assigned(SDL_GameControllerGetSensorDataWithTimestamp) Then result := false;
    SDL_GameControllerHasRumble := TSDL_GameControllerHasRumble_func(GetProcAddress(LibHandle, 'SDL_GameControllerHasRumble'));
    If Not assigned(SDL_GameControllerHasRumble) Then result := false;
    SDL_GameControllerRumble := TSDL_GameControllerRumble_func(GetProcAddress(LibHandle, 'SDL_GameControllerRumble'));
    If Not assigned(SDL_GameControllerRumble) Then result := false;
    SDL_GameControllerHasRumbleTriggers := TSDL_GameControllerHasRumbleTriggers_func(GetProcAddress(LibHandle, 'SDL_GameControllerHasRumbleTriggers'));
    If Not assigned(SDL_GameControllerHasRumbleTriggers) Then result := false;
    SDL_GameControllerRumbleTriggers := TSDL_GameControllerRumbleTriggers_func(GetProcAddress(LibHandle, 'SDL_GameControllerRumbleTriggers'));
    If Not assigned(SDL_GameControllerRumbleTriggers) Then result := false;
    SDL_GameControllerHasLED := TSDL_GameControllerHasLED_func(GetProcAddress(LibHandle, 'SDL_GameControllerHasLED'));
    If Not assigned(SDL_GameControllerHasLED) Then result := false;
    SDL_GameControllerSetLED := TSDL_GameControllerSetLED_func(GetProcAddress(LibHandle, 'SDL_GameControllerSetLED'));
    If Not assigned(SDL_GameControllerSetLED) Then result := false;
    SDL_GameControllerSendEffect := TSDL_GameControllerSendEffect_func(GetProcAddress(LibHandle, 'SDL_GameControllerSendEffect'));
    If Not assigned(SDL_GameControllerSendEffect) Then result := false;
    SDL_GameControllerGetAppleSFSymbolsNameForAxis := TSDL_GameControllerGetAppleSFSymbolsNameForAxis_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetAppleSFSymbolsNameForAxis'));
    If Not assigned(SDL_GameControllerGetAppleSFSymbolsNameForAxis) Then result := false;
    SDL_GameControllerGetAppleSFSymbolsNameForButton := TSDL_GameControllerGetAppleSFSymbolsNameForButton_func(GetProcAddress(LibHandle, 'SDL_GameControllerGetAppleSFSymbolsNameForButton'));
    If Not assigned(SDL_GameControllerGetAppleSFSymbolsNameForButton) Then result := false;
    SDL_RecordGesture := TSDL_RecordGesture_func(GetProcAddress(LibHandle, 'SDL_RecordGesture'));
    If Not assigned(SDL_RecordGesture) Then result := false;
    SDL_SaveAllDollarTemplates := TSDL_SaveAllDollarTemplates_func(GetProcAddress(LibHandle, 'SDL_SaveAllDollarTemplates'));
    If Not assigned(SDL_SaveAllDollarTemplates) Then result := false;
    SDL_SaveDollarTemplate := TSDL_SaveDollarTemplate_func(GetProcAddress(LibHandle, 'SDL_SaveDollarTemplate'));
    If Not assigned(SDL_SaveDollarTemplate) Then result := false;
    SDL_LoadDollarTemplates := TSDL_LoadDollarTemplates_func(GetProcAddress(LibHandle, 'SDL_LoadDollarTemplates'));
    If Not assigned(SDL_LoadDollarTemplates) Then result := false;
    SDL_GUIDToString := TSDL_GUIDToString_proc(GetProcAddress(LibHandle, 'SDL_GUIDToString'));
    If Not assigned(SDL_GUIDToString) Then result := false;
    SDL_GUIDFromString := TSDL_GUIDFromString_func(GetProcAddress(LibHandle, 'SDL_GUIDFromString'));
    If Not assigned(SDL_GUIDFromString) Then result := false;
    SDL_HapticName := TSDL_HapticName_func(GetProcAddress(LibHandle, 'SDL_HapticName'));
    If Not assigned(SDL_HapticName) Then result := false;
    SDL_HapticOpen := TSDL_HapticOpen_func(GetProcAddress(LibHandle, 'SDL_HapticOpen'));
    If Not assigned(SDL_HapticOpen) Then result := false;
    SDL_HapticOpened := TSDL_HapticOpened_func(GetProcAddress(LibHandle, 'SDL_HapticOpened'));
    If Not assigned(SDL_HapticOpened) Then result := false;
    SDL_HapticIndex := TSDL_HapticIndex_func(GetProcAddress(LibHandle, 'SDL_HapticIndex'));
    If Not assigned(SDL_HapticIndex) Then result := false;
    SDL_JoystickIsHaptic := TSDL_JoystickIsHaptic_func(GetProcAddress(LibHandle, 'SDL_JoystickIsHaptic'));
    If Not assigned(SDL_JoystickIsHaptic) Then result := false;
    SDL_HapticOpenFromJoystick := TSDL_HapticOpenFromJoystick_func(GetProcAddress(LibHandle, 'SDL_HapticOpenFromJoystick'));
    If Not assigned(SDL_HapticOpenFromJoystick) Then result := false;
    SDL_HapticClose := TSDL_HapticClose_proc(GetProcAddress(LibHandle, 'SDL_HapticClose'));
    If Not assigned(SDL_HapticClose) Then result := false;
    SDL_HapticNumEffects := TSDL_HapticNumEffects_func(GetProcAddress(LibHandle, 'SDL_HapticNumEffects'));
    If Not assigned(SDL_HapticNumEffects) Then result := false;
    SDL_HapticNumEffectsPlaying := TSDL_HapticNumEffectsPlaying_func(GetProcAddress(LibHandle, 'SDL_HapticNumEffectsPlaying'));
    If Not assigned(SDL_HapticNumEffectsPlaying) Then result := false;
    SDL_HapticQuery := TSDL_HapticQuery_func(GetProcAddress(LibHandle, 'SDL_HapticQuery'));
    If Not assigned(SDL_HapticQuery) Then result := false;
    SDL_HapticNumAxes := TSDL_HapticNumAxes_func(GetProcAddress(LibHandle, 'SDL_HapticNumAxes'));
    If Not assigned(SDL_HapticNumAxes) Then result := false;
    SDL_HapticEffectSupported := TSDL_HapticEffectSupported_func(GetProcAddress(LibHandle, 'SDL_HapticEffectSupported'));
    If Not assigned(SDL_HapticEffectSupported) Then result := false;
    SDL_HapticNewEffect := TSDL_HapticNewEffect_func(GetProcAddress(LibHandle, 'SDL_HapticNewEffect'));
    If Not assigned(SDL_HapticNewEffect) Then result := false;
    SDL_HapticUpdateEffect := TSDL_HapticUpdateEffect_func(GetProcAddress(LibHandle, 'SDL_HapticUpdateEffect'));
    If Not assigned(SDL_HapticUpdateEffect) Then result := false;
    SDL_HapticRunEffect := TSDL_HapticRunEffect_func(GetProcAddress(LibHandle, 'SDL_HapticRunEffect'));
    If Not assigned(SDL_HapticRunEffect) Then result := false;
    SDL_HapticStopEffect := TSDL_HapticStopEffect_func(GetProcAddress(LibHandle, 'SDL_HapticStopEffect'));
    If Not assigned(SDL_HapticStopEffect) Then result := false;
    SDL_HapticDestroyEffect := TSDL_HapticDestroyEffect_proc(GetProcAddress(LibHandle, 'SDL_HapticDestroyEffect'));
    If Not assigned(SDL_HapticDestroyEffect) Then result := false;
    SDL_HapticGetEffectStatus := TSDL_HapticGetEffectStatus_func(GetProcAddress(LibHandle, 'SDL_HapticGetEffectStatus'));
    If Not assigned(SDL_HapticGetEffectStatus) Then result := false;
    SDL_HapticSetGain := TSDL_HapticSetGain_func(GetProcAddress(LibHandle, 'SDL_HapticSetGain'));
    If Not assigned(SDL_HapticSetGain) Then result := false;
    SDL_HapticSetAutocenter := TSDL_HapticSetAutocenter_func(GetProcAddress(LibHandle, 'SDL_HapticSetAutocenter'));
    If Not assigned(SDL_HapticSetAutocenter) Then result := false;
    SDL_HapticPause := TSDL_HapticPause_func(GetProcAddress(LibHandle, 'SDL_HapticPause'));
    If Not assigned(SDL_HapticPause) Then result := false;
    SDL_HapticUnpause := TSDL_HapticUnpause_func(GetProcAddress(LibHandle, 'SDL_HapticUnpause'));
    If Not assigned(SDL_HapticUnpause) Then result := false;
    SDL_HapticStopAll := TSDL_HapticStopAll_func(GetProcAddress(LibHandle, 'SDL_HapticStopAll'));
    If Not assigned(SDL_HapticStopAll) Then result := false;
    SDL_HapticRumbleSupported := TSDL_HapticRumbleSupported_func(GetProcAddress(LibHandle, 'SDL_HapticRumbleSupported'));
    If Not assigned(SDL_HapticRumbleSupported) Then result := false;
    SDL_HapticRumbleInit := TSDL_HapticRumbleInit_func(GetProcAddress(LibHandle, 'SDL_HapticRumbleInit'));
    If Not assigned(SDL_HapticRumbleInit) Then result := false;
    SDL_HapticRumblePlay := TSDL_HapticRumblePlay_func(GetProcAddress(LibHandle, 'SDL_HapticRumblePlay'));
    If Not assigned(SDL_HapticRumblePlay) Then result := false;
    SDL_HapticRumbleStop := TSDL_HapticRumbleStop_func(GetProcAddress(LibHandle, 'SDL_HapticRumbleStop'));
    If Not assigned(SDL_HapticRumbleStop) Then result := false;
    SDL_SetHintWithPriority := TSDL_SetHintWithPriority_func(GetProcAddress(LibHandle, 'SDL_SetHintWithPriority'));
    If Not assigned(SDL_SetHintWithPriority) Then result := false;
    SDL_SetHint := TSDL_SetHint_func(GetProcAddress(LibHandle, 'SDL_SetHint'));
    If Not assigned(SDL_SetHint) Then result := false;
    SDL_ResetHint := TSDL_ResetHint_func(GetProcAddress(LibHandle, 'SDL_ResetHint'));
    If Not assigned(SDL_ResetHint) Then result := false;
    SDL_ResetHints := TSDL_ResetHints_proc(GetProcAddress(LibHandle, 'SDL_ResetHints'));
    If Not assigned(SDL_ResetHints) Then result := false;
    SDL_GetHint := TSDL_GetHint_func(GetProcAddress(LibHandle, 'SDL_GetHint'));
    If Not assigned(SDL_GetHint) Then result := false;
    SDL_GetHintBoolean := TSDL_GetHintBoolean_func(GetProcAddress(LibHandle, 'SDL_GetHintBoolean'));
    If Not assigned(SDL_GetHintBoolean) Then result := false;
    SDL_AddHintCallback := TSDL_AddHintCallback_proc(GetProcAddress(LibHandle, 'SDL_AddHintCallback'));
    If Not assigned(SDL_AddHintCallback) Then result := false;
    SDL_DelHintCallback := TSDL_DelHintCallback_proc(GetProcAddress(LibHandle, 'SDL_DelHintCallback'));
    If Not assigned(SDL_DelHintCallback) Then result := false;
    SDL_ClearHints := TSDL_ClearHints_proc(GetProcAddress(LibHandle, 'SDL_ClearHints'));
    If Not assigned(SDL_ClearHints) Then result := false;
    SDL_LockJoysticks := TSDL_LockJoysticks_proc(GetProcAddress(LibHandle, 'SDL_LockJoysticks'));
    If Not assigned(SDL_LockJoysticks) Then result := false;
    SDL_UnlockJoysticks := TSDL_UnlockJoysticks_proc(GetProcAddress(LibHandle, 'SDL_UnlockJoysticks'));
    If Not assigned(SDL_UnlockJoysticks) Then result := false;//*)
    SDL_NumJoysticks := TSDL_NumJoysticks_func(GetProcAddress(LibHandle, 'SDL_NumJoysticks'));
    If Not assigned(SDL_NumJoysticks) Then result := false;
    SDL_JoystickNameForIndex := TSDL_JoystickNameForIndex_func(GetProcAddress(LibHandle, 'SDL_JoystickNameForIndex'));
    If Not assigned(SDL_JoystickNameForIndex) Then result := false;
    (*     SDL_JoystickPathForIndex := TSDL_JoystickPathForIndex_func(GetProcAddress(LibHandle, 'SDL_JoystickPathForIndex'));
        If Not assigned(SDL_JoystickPathForIndex) Then result := false;
        SDL_JoystickGetDevicePlayerIndex := TSDL_JoystickGetDevicePlayerIndex_func(GetProcAddress(LibHandle, 'SDL_JoystickGetDevicePlayerIndex'));
        If Not assigned(SDL_JoystickGetDevicePlayerIndex) Then result := false;
        SDL_JoystickGetDeviceGUID := TSDL_JoystickGetDeviceGUID_func(GetProcAddress(LibHandle, 'SDL_JoystickGetDeviceGUID'));
        If Not assigned(SDL_JoystickGetDeviceGUID) Then result := false;
        SDL_JoystickGetDeviceVendor := TSDL_JoystickGetDeviceVendor_func(GetProcAddress(LibHandle, 'SDL_JoystickGetDeviceVendor'));
        If Not assigned(SDL_JoystickGetDeviceVendor) Then result := false;
        SDL_JoystickGetDeviceProduct := TSDL_JoystickGetDeviceProduct_func(GetProcAddress(LibHandle, 'SDL_JoystickGetDeviceProduct'));
        If Not assigned(SDL_JoystickGetDeviceProduct) Then result := false;
        SDL_JoystickGetDeviceProductVersion := TSDL_JoystickGetDeviceProductVersion_func(GetProcAddress(LibHandle, 'SDL_JoystickGetDeviceProductVersion'));
        If Not assigned(SDL_JoystickGetDeviceProductVersion) Then result := false;
        SDL_JoystickGetDeviceType := TSDL_JoystickGetDeviceType_func(GetProcAddress(LibHandle, 'SDL_JoystickGetDeviceType'));
        If Not assigned(SDL_JoystickGetDeviceType) Then result := false;
        SDL_JoystickGetDeviceInstanceID := TSDL_JoystickGetDeviceInstanceID_func(GetProcAddress(LibHandle, 'SDL_JoystickGetDeviceInstanceID'));
        If Not assigned(SDL_JoystickGetDeviceInstanceID) Then result := false;// *)
    SDL_JoystickOpen := TSDL_JoystickOpen_func(GetProcAddress(LibHandle, 'SDL_JoystickOpen'));
    If Not assigned(SDL_JoystickOpen) Then result := false;
    (*        SDL_JoystickFromInstanceID := TSDL_JoystickFromInstanceID_func(GetProcAddress(LibHandle, 'SDL_JoystickFromInstanceID'));
    If Not assigned(SDL_JoystickFromInstanceID) Then result := false;
    SDL_JoystickFromPlayerIndex := TSDL_JoystickFromPlayerIndex_func(GetProcAddress(LibHandle, 'SDL_JoystickFromPlayerIndex'));
    If Not assigned(SDL_JoystickFromPlayerIndex) Then result := false;
    SDL_JoystickAttachVirtual := TSDL_JoystickAttachVirtual_func(GetProcAddress(LibHandle, 'SDL_JoystickAttachVirtual'));
    If Not assigned(SDL_JoystickAttachVirtual) Then result := false;
    SDL_JoystickAttachVirtualEx := TSDL_JoystickAttachVirtualEx_func(GetProcAddress(LibHandle, 'SDL_JoystickAttachVirtualEx'));
    If Not assigned(SDL_JoystickAttachVirtualEx) Then result := false;
    SDL_JoystickDetachVirtual := TSDL_JoystickDetachVirtual_func(GetProcAddress(LibHandle, 'SDL_JoystickDetachVirtual'));
    If Not assigned(SDL_JoystickDetachVirtual) Then result := false;
    SDL_JoystickIsVirtual := TSDL_JoystickIsVirtual_func(GetProcAddress(LibHandle, 'SDL_JoystickIsVirtual'));
    If Not assigned(SDL_JoystickIsVirtual) Then result := false;
    SDL_JoystickSetVirtualAxis := TSDL_JoystickSetVirtualAxis_func(GetProcAddress(LibHandle, 'SDL_JoystickSetVirtualAxis'));
    If Not assigned(SDL_JoystickSetVirtualAxis) Then result := false;
    SDL_JoystickSetVirtualButton := TSDL_JoystickSetVirtualButton_func(GetProcAddress(LibHandle, 'SDL_JoystickSetVirtualButton'));
    If Not assigned(SDL_JoystickSetVirtualButton) Then result := false;
    SDL_JoystickSetVirtualHat := TSDL_JoystickSetVirtualHat_func(GetProcAddress(LibHandle, 'SDL_JoystickSetVirtualHat'));
    If Not assigned(SDL_JoystickSetVirtualHat) Then result := false;
    SDL_JoystickName := TSDL_JoystickName_func(GetProcAddress(LibHandle, 'SDL_JoystickName'));
    If Not assigned(SDL_JoystickName) Then result := false;
    SDL_JoystickPath := TSDL_JoystickPath_func(GetProcAddress(LibHandle, 'SDL_JoystickPath'));
    If Not assigned(SDL_JoystickPath) Then result := false;
    SDL_JoystickGetPlayerIndex := TSDL_JoystickGetPlayerIndex_func(GetProcAddress(LibHandle, 'SDL_JoystickGetPlayerIndex'));
    If Not assigned(SDL_JoystickGetPlayerIndex) Then result := false;
    SDL_JoystickSetPlayerIndex := TSDL_JoystickSetPlayerIndex_proc(GetProcAddress(LibHandle, 'SDL_JoystickSetPlayerIndex'));
    If Not assigned(SDL_JoystickSetPlayerIndex) Then result := false;
    SDL_JoystickGetGUID := TSDL_JoystickGetGUID_func(GetProcAddress(LibHandle, 'SDL_JoystickGetGUID'));
    If Not assigned(SDL_JoystickGetGUID) Then result := false;
    SDL_JoystickGetVendor := TSDL_JoystickGetVendor_func(GetProcAddress(LibHandle, 'SDL_JoystickGetVendor'));
    If Not assigned(SDL_JoystickGetVendor) Then result := false;
    SDL_JoystickGetProduct := TSDL_JoystickGetProduct_func(GetProcAddress(LibHandle, 'SDL_JoystickGetProduct'));
    If Not assigned(SDL_JoystickGetProduct) Then result := false;
    SDL_JoystickGetProductVersion := TSDL_JoystickGetProductVersion_func(GetProcAddress(LibHandle, 'SDL_JoystickGetProductVersion'));
    If Not assigned(SDL_JoystickGetProductVersion) Then result := false;
    SDL_JoystickGetFirmwareVersion := TSDL_JoystickGetFirmwareVersion_func(GetProcAddress(LibHandle, 'SDL_JoystickGetFirmwareVersion'));
    If Not assigned(SDL_JoystickGetFirmwareVersion) Then result := false;
    SDL_JoystickGetSerial := TSDL_JoystickGetSerial_func(GetProcAddress(LibHandle, 'SDL_JoystickGetSerial'));
    If Not assigned(SDL_JoystickGetSerial) Then result := false;
    SDL_JoystickGetType := TSDL_JoystickGetType_func(GetProcAddress(LibHandle, 'SDL_JoystickGetType'));
    If Not assigned(SDL_JoystickGetType) Then result := false;
    SDL_JoystickGetGUIDString := TSDL_JoystickGetGUIDString_proc(GetProcAddress(LibHandle, 'SDL_JoystickGetGUIDString'));
    If Not assigned(SDL_JoystickGetGUIDString) Then result := false;
    SDL_JoystickGetGUIDFromString := TSDL_JoystickGetGUIDFromString_func(GetProcAddress(LibHandle, 'SDL_JoystickGetGUIDFromString'));
    If Not assigned(SDL_JoystickGetGUIDFromString) Then result := false;
    SDL_GetJoystickGUIDInfo := TSDL_GetJoystickGUIDInfo_proc(GetProcAddress(LibHandle, 'SDL_GetJoystickGUIDInfo'));
    If Not assigned(SDL_GetJoystickGUIDInfo) Then result := false;
    SDL_JoystickGetAttached := TSDL_JoystickGetAttached_func(GetProcAddress(LibHandle, 'SDL_JoystickGetAttached'));
    If Not assigned(SDL_JoystickGetAttached) Then result := false;
    SDL_JoystickInstanceID := TSDL_JoystickInstanceID_func(GetProcAddress(LibHandle, 'SDL_JoystickInstanceID'));
    If Not assigned(SDL_JoystickInstanceID) Then result := false;//*)
    SDL_JoystickNumAxes := TSDL_JoystickNumAxes_func(GetProcAddress(LibHandle, 'SDL_JoystickNumAxes'));
    If Not assigned(SDL_JoystickNumAxes) Then result := false;
    (*    SDL_JoystickNumBalls := TSDL_JoystickNumBalls_func(GetProcAddress(LibHandle, 'SDL_JoystickNumBalls'));
        If Not assigned(SDL_JoystickNumBalls) Then result := false;
        SDL_JoystickNumHats := TSDL_JoystickNumHats_func(GetProcAddress(LibHandle, 'SDL_JoystickNumHats'));
        If Not assigned(SDL_JoystickNumHats) Then result := false; //*)
    SDL_JoystickNumButtons := TSDL_JoystickNumButtons_func(GetProcAddress(LibHandle, 'SDL_JoystickNumButtons'));
    If Not assigned(SDL_JoystickNumButtons) Then result := false;
    (*    SDL_JoystickUpdate := TSDL_JoystickUpdate_proc(GetProcAddress(LibHandle, 'SDL_JoystickUpdate'));
        If Not assigned(SDL_JoystickUpdate) Then result := false;// *)
    SDL_JoystickEventState := TSDL_JoystickEventState_func(GetProcAddress(LibHandle, 'SDL_JoystickEventState'));
    If Not assigned(SDL_JoystickEventState) Then result := false;
    SDL_JoystickGetAxis := TSDL_JoystickGetAxis_func(GetProcAddress(LibHandle, 'SDL_JoystickGetAxis'));
    If Not assigned(SDL_JoystickGetAxis) Then result := false;
    (*        SDL_JoystickGetAxisInitialState := TSDL_JoystickGetAxisInitialState_func(GetProcAddress(LibHandle, 'SDL_JoystickGetAxisInitialState'));
            If Not assigned(SDL_JoystickGetAxisInitialState) Then result := false;
            SDL_JoystickGetHat := TSDL_JoystickGetHat_func(GetProcAddress(LibHandle, 'SDL_JoystickGetHat'));
            If Not assigned(SDL_JoystickGetHat) Then result := false;
            SDL_JoystickGetBall := TSDL_JoystickGetBall_func(GetProcAddress(LibHandle, 'SDL_JoystickGetBall'));
            If Not assigned(SDL_JoystickGetBall) Then result := false;// *)
    SDL_JoystickGetButton := TSDL_JoystickGetButton_func(GetProcAddress(LibHandle, 'SDL_JoystickGetButton'));
    If Not assigned(SDL_JoystickGetButton) Then result := false;
    (*            SDL_JoystickRumble := TSDL_JoystickRumble_func(GetProcAddress(LibHandle, 'SDL_JoystickRumble'));
                If Not assigned(SDL_JoystickRumble) Then result := false;
                SDL_JoystickRumbleTriggers := TSDL_JoystickRumbleTriggers_func(GetProcAddress(LibHandle, 'SDL_JoystickRumbleTriggers'));
                If Not assigned(SDL_JoystickRumbleTriggers) Then result := false;
                SDL_JoystickHasLED := TSDL_JoystickHasLED_func(GetProcAddress(LibHandle, 'SDL_JoystickHasLED'));
                If Not assigned(SDL_JoystickHasLED) Then result := false;
                SDL_JoystickHasRumble := TSDL_JoystickHasRumble_func(GetProcAddress(LibHandle, 'SDL_JoystickHasRumble'));
                If Not assigned(SDL_JoystickHasRumble) Then result := false;
                SDL_JoystickHasRumbleTriggers := TSDL_JoystickHasRumbleTriggers_func(GetProcAddress(LibHandle, 'SDL_JoystickHasRumbleTriggers'));
                If Not assigned(SDL_JoystickHasRumbleTriggers) Then result := false;
                SDL_JoystickSetLED := TSDL_JoystickSetLED_func(GetProcAddress(LibHandle, 'SDL_JoystickSetLED'));
                If Not assigned(SDL_JoystickSetLED) Then result := false;
                SDL_JoystickSendEffect := TSDL_JoystickSendEffect_func(GetProcAddress(LibHandle, 'SDL_JoystickSendEffect'));
                If Not assigned(SDL_JoystickSendEffect) Then result := false;*)
    SDL_JoystickClose := TSDL_JoystickClose_proc(GetProcAddress(LibHandle, 'SDL_JoystickClose'));
    If Not assigned(SDL_JoystickClose) Then result := false;
    (*                SDL_JoystickCurrentPowerLevel := TSDL_JoystickCurrentPowerLevel_func(GetProcAddress(LibHandle, 'SDL_JoystickCurrentPowerLevel'));
                    If Not assigned(SDL_JoystickCurrentPowerLevel) Then result := false;
                    SDL_GetKeyboardState := TSDL_GetKeyboardState_func(GetProcAddress(LibHandle, 'SDL_GetKeyboardState'));
                    If Not assigned(SDL_GetKeyboardState) Then result := false;
                    SDL_SetModState := TSDL_SetModState_proc(GetProcAddress(LibHandle, 'SDL_SetModState'));
                    If Not assigned(SDL_SetModState) Then result := false;
                    SDL_GetKeyFromScancode := TSDL_GetKeyFromScancode_func(GetProcAddress(LibHandle, 'SDL_GetKeyFromScancode'));
                    If Not assigned(SDL_GetKeyFromScancode) Then result := false;
                    SDL_GetScancodeFromKey := TSDL_GetScancodeFromKey_func(GetProcAddress(LibHandle, 'SDL_GetScancodeFromKey'));
                    If Not assigned(SDL_GetScancodeFromKey) Then result := false;
                    SDL_GetScancodeName := TSDL_GetScancodeName_func(GetProcAddress(LibHandle, 'SDL_GetScancodeName'));
                    If Not assigned(SDL_GetScancodeName) Then result := false;
                    SDL_GetScancodeFromName := TSDL_GetScancodeFromName_func(GetProcAddress(LibHandle, 'SDL_GetScancodeFromName'));
                    If Not assigned(SDL_GetScancodeFromName) Then result := false;
                    SDL_GetKeyName := TSDL_GetKeyName_func(GetProcAddress(LibHandle, 'SDL_GetKeyName'));
                    If Not assigned(SDL_GetKeyName) Then result := false;
                    SDL_GetKeyFromName := TSDL_GetKeyFromName_func(GetProcAddress(LibHandle, 'SDL_GetKeyFromName'));
                    If Not assigned(SDL_GetKeyFromName) Then result := false;
                    SDL_SetTextInputRect := TSDL_SetTextInputRect_proc(GetProcAddress(LibHandle, 'SDL_SetTextInputRect'));
                    If Not assigned(SDL_SetTextInputRect) Then result := false;
                    SDL_IsScreenKeyboardShown := TSDL_IsScreenKeyboardShown_func(GetProcAddress(LibHandle, 'SDL_IsScreenKeyboardShown'));
                    If Not assigned(SDL_IsScreenKeyboardShown) Then result := false;
                    SDL_LoadObject := TSDL_LoadObject_func(GetProcAddress(LibHandle, 'SDL_LoadObject'));
                    If Not assigned(SDL_LoadObject) Then result := false;
                    SDL_UnloadObject := TSDL_UnloadObject_proc(GetProcAddress(LibHandle, 'SDL_UnloadObject'));
                    If Not assigned(SDL_UnloadObject) Then result := false;
                    SDL_LogSetAllPriority := TSDL_LogSetAllPriority_proc(GetProcAddress(LibHandle, 'SDL_LogSetAllPriority'));
                    If Not assigned(SDL_LogSetAllPriority) Then result := false;
                    SDL_LogSetPriority := TSDL_LogSetPriority_proc(GetProcAddress(LibHandle, 'SDL_LogSetPriority'));
                    If Not assigned(SDL_LogSetPriority) Then result := false;
                    SDL_LogGetPriority := TSDL_LogGetPriority_func(GetProcAddress(LibHandle, 'SDL_LogGetPriority'));
                    If Not assigned(SDL_LogGetPriority) Then result := false;
                    SDL_LogResetPriorities := TSDL_LogResetPriorities_proc(GetProcAddress(LibHandle, 'SDL_LogResetPriorities'));
                    If Not assigned(SDL_LogResetPriorities) Then result := false;
                    SDL_Log := TSDL_Log_proc(GetProcAddress(LibHandle, 'SDL_Log'));
                    If Not assigned(SDL_Log) Then result := false;
                    SDL_LogVerbose := TSDL_LogVerbose_proc(GetProcAddress(LibHandle, 'SDL_LogVerbose'));
                    If Not assigned(SDL_LogVerbose) Then result := false;
                    SDL_LogDebug := TSDL_LogDebug_proc(GetProcAddress(LibHandle, 'SDL_LogDebug'));
                    If Not assigned(SDL_LogDebug) Then result := false;
                    SDL_LogInfo := TSDL_LogInfo_proc(GetProcAddress(LibHandle, 'SDL_LogInfo'));
                    If Not assigned(SDL_LogInfo) Then result := false;
                    SDL_LogWarn := TSDL_LogWarn_proc(GetProcAddress(LibHandle, 'SDL_LogWarn'));
                    If Not assigned(SDL_LogWarn) Then result := false;
                    SDL_LogError := TSDL_LogError_proc(GetProcAddress(LibHandle, 'SDL_LogError'));
                    If Not assigned(SDL_LogError) Then result := false;
                    SDL_LogCritical := TSDL_LogCritical_proc(GetProcAddress(LibHandle, 'SDL_LogCritical'));
                    If Not assigned(SDL_LogCritical) Then result := false;
                    SDL_LogMessage := TSDL_LogMessage_proc(GetProcAddress(LibHandle, 'SDL_LogMessage'));
                    If Not assigned(SDL_LogMessage) Then result := false;
                    SDL_LogMessageV := TSDL_LogMessageV_proc(GetProcAddress(LibHandle, 'SDL_LogMessageV'));
                    If Not assigned(SDL_LogMessageV) Then result := false;
                    SDL_ShowMessageBox := TSDL_ShowMessageBox_func(GetProcAddress(LibHandle, 'SDL_ShowMessageBox'));
                    If Not assigned(SDL_ShowMessageBox) Then result := false;
                    SDL_ShowSimpleMessageBox := TSDL_ShowSimpleMessageBox_func(GetProcAddress(LibHandle, 'SDL_ShowSimpleMessageBox'));
                    If Not assigned(SDL_ShowSimpleMessageBox) Then result := false;
                    SDL_GetMouseState := TSDL_GetMouseState_func(GetProcAddress(LibHandle, 'SDL_GetMouseState'));
                    If Not assigned(SDL_GetMouseState) Then result := false;
                    SDL_GetGlobalMouseState := TSDL_GetGlobalMouseState_func(GetProcAddress(LibHandle, 'SDL_GetGlobalMouseState'));
                    If Not assigned(SDL_GetGlobalMouseState) Then result := false;
                    SDL_GetRelativeMouseState := TSDL_GetRelativeMouseState_func(GetProcAddress(LibHandle, 'SDL_GetRelativeMouseState'));
                    If Not assigned(SDL_GetRelativeMouseState) Then result := false;
                    SDL_WarpMouseInWindow := TSDL_WarpMouseInWindow_proc(GetProcAddress(LibHandle, 'SDL_WarpMouseInWindow'));
                    If Not assigned(SDL_WarpMouseInWindow) Then result := false;
                    SDL_WarpMouseGlobal := TSDL_WarpMouseGlobal_func(GetProcAddress(LibHandle, 'SDL_WarpMouseGlobal'));
                    If Not assigned(SDL_WarpMouseGlobal) Then result := false;
                    SDL_SetRelativeMouseMode := TSDL_SetRelativeMouseMode_func(GetProcAddress(LibHandle, 'SDL_SetRelativeMouseMode'));
                    If Not assigned(SDL_SetRelativeMouseMode) Then result := false;
                    SDL_CaptureMouse := TSDL_CaptureMouse_func(GetProcAddress(LibHandle, 'SDL_CaptureMouse'));
                    If Not assigned(SDL_CaptureMouse) Then result := false;
                    SDL_CreateCursor := TSDL_CreateCursor_func(GetProcAddress(LibHandle, 'SDL_CreateCursor'));
                    If Not assigned(SDL_CreateCursor) Then result := false;
                    SDL_CreateColorCursor := TSDL_CreateColorCursor_func(GetProcAddress(LibHandle, 'SDL_CreateColorCursor'));
                    If Not assigned(SDL_CreateColorCursor) Then result := false;
                    SDL_CreateSystemCursor := TSDL_CreateSystemCursor_func(GetProcAddress(LibHandle, 'SDL_CreateSystemCursor'));
                    If Not assigned(SDL_CreateSystemCursor) Then result := false;
                    SDL_SetCursor := TSDL_SetCursor_proc(GetProcAddress(LibHandle, 'SDL_SetCursor'));
                    If Not assigned(SDL_SetCursor) Then result := false;
                    SDL_FreeCursor := TSDL_FreeCursor_proc(GetProcAddress(LibHandle, 'SDL_FreeCursor'));
                    If Not assigned(SDL_FreeCursor) Then result := false;
                    SDL_ShowCursor := TSDL_ShowCursor_func(GetProcAddress(LibHandle, 'SDL_ShowCursor'));
                    If Not assigned(SDL_ShowCursor) Then result := false;
                    SDL_LockMutex := TSDL_LockMutex_func(GetProcAddress(LibHandle, 'SDL_LockMutex'));
                    If Not assigned(SDL_LockMutex) Then result := false;
                    SDL_TryLockMutex := TSDL_TryLockMutex_func(GetProcAddress(LibHandle, 'SDL_TryLockMutex'));
                    If Not assigned(SDL_TryLockMutex) Then result := false;
                    SDL_UnlockMutex := TSDL_UnlockMutex_func(GetProcAddress(LibHandle, 'SDL_UnlockMutex'));
                    If Not assigned(SDL_UnlockMutex) Then result := false;
                    SDL_DestroyMutex := TSDL_DestroyMutex_proc(GetProcAddress(LibHandle, 'SDL_DestroyMutex'));
                    If Not assigned(SDL_DestroyMutex) Then result := false;
                    SDL_CreateSemaphore := TSDL_CreateSemaphore_func(GetProcAddress(LibHandle, 'SDL_CreateSemaphore'));
                    If Not assigned(SDL_CreateSemaphore) Then result := false;
                    SDL_DestroySemaphore := TSDL_DestroySemaphore_proc(GetProcAddress(LibHandle, 'SDL_DestroySemaphore'));
                    If Not assigned(SDL_DestroySemaphore) Then result := false;
                    SDL_SemWait := TSDL_SemWait_func(GetProcAddress(LibHandle, 'SDL_SemWait'));
                    If Not assigned(SDL_SemWait) Then result := false;
                    SDL_SemTryWait := TSDL_SemTryWait_func(GetProcAddress(LibHandle, 'SDL_SemTryWait'));
                    If Not assigned(SDL_SemTryWait) Then result := false;
                    SDL_SemWaitTimeout := TSDL_SemWaitTimeout_func(GetProcAddress(LibHandle, 'SDL_SemWaitTimeout'));
                    If Not assigned(SDL_SemWaitTimeout) Then result := false;
                    SDL_SemPost := TSDL_SemPost_func(GetProcAddress(LibHandle, 'SDL_SemPost'));
                    If Not assigned(SDL_SemPost) Then result := false;
                    SDL_SemValue := TSDL_SemValue_func(GetProcAddress(LibHandle, 'SDL_SemValue'));
                    If Not assigned(SDL_SemValue) Then result := false;
                    SDL_DestroyCond := TSDL_DestroyCond_proc(GetProcAddress(LibHandle, 'SDL_DestroyCond'));
                    If Not assigned(SDL_DestroyCond) Then result := false;
                    SDL_CondSignal := TSDL_CondSignal_func(GetProcAddress(LibHandle, 'SDL_CondSignal'));
                    If Not assigned(SDL_CondSignal) Then result := false;
                    SDL_CondBroadcast := TSDL_CondBroadcast_func(GetProcAddress(LibHandle, 'SDL_CondBroadcast'));
                    If Not assigned(SDL_CondBroadcast) Then result := false;
                    SDL_CondWait := TSDL_CondWait_func(GetProcAddress(LibHandle, 'SDL_CondWait'));
                    If Not assigned(SDL_CondWait) Then result := false;
                    SDL_CondWaitTimeout := TSDL_CondWaitTimeout_func(GetProcAddress(LibHandle, 'SDL_CondWaitTimeout'));
                    If Not assigned(SDL_CondWaitTimeout) Then result := false;
                    SDL_GetPixelFormatName := TSDL_GetPixelFormatName_func(GetProcAddress(LibHandle, 'SDL_GetPixelFormatName'));
                    If Not assigned(SDL_GetPixelFormatName) Then result := false;
                    SDL_PixelFormatEnumToMasks := TSDL_PixelFormatEnumToMasks_func(GetProcAddress(LibHandle, 'SDL_PixelFormatEnumToMasks'));
                    If Not assigned(SDL_PixelFormatEnumToMasks) Then result := false;
                    SDL_MasksToPixelFormatEnum := TSDL_MasksToPixelFormatEnum_func(GetProcAddress(LibHandle, 'SDL_MasksToPixelFormatEnum'));
                    If Not assigned(SDL_MasksToPixelFormatEnum) Then result := false;
                    SDL_AllocFormat := TSDL_AllocFormat_func(GetProcAddress(LibHandle, 'SDL_AllocFormat'));
                    If Not assigned(SDL_AllocFormat) Then result := false;
                    SDL_FreeFormat := TSDL_FreeFormat_proc(GetProcAddress(LibHandle, 'SDL_FreeFormat'));
                    If Not assigned(SDL_FreeFormat) Then result := false;
                    SDL_AllocPalette := TSDL_AllocPalette_func(GetProcAddress(LibHandle, 'SDL_AllocPalette'));
                    If Not assigned(SDL_AllocPalette) Then result := false;
                    SDL_SetPixelFormatPalette := TSDL_SetPixelFormatPalette_func(GetProcAddress(LibHandle, 'SDL_SetPixelFormatPalette'));
                    If Not assigned(SDL_SetPixelFormatPalette) Then result := false;
                    SDL_SetPaletteColors := TSDL_SetPaletteColors_func(GetProcAddress(LibHandle, 'SDL_SetPaletteColors'));
                    If Not assigned(SDL_SetPaletteColors) Then result := false;
                    SDL_FreePalette := TSDL_FreePalette_proc(GetProcAddress(LibHandle, 'SDL_FreePalette'));
                    If Not assigned(SDL_FreePalette) Then result := false;
                    SDL_MapRGB := TSDL_MapRGB_func(GetProcAddress(LibHandle, 'SDL_MapRGB'));
                    If Not assigned(SDL_MapRGB) Then result := false;
                    SDL_MapRGBA := TSDL_MapRGBA_func(GetProcAddress(LibHandle, 'SDL_MapRGBA'));
                    If Not assigned(SDL_MapRGBA) Then result := false;
                    SDL_GetRGB := TSDL_GetRGB_proc(GetProcAddress(LibHandle, 'SDL_GetRGB'));
                    If Not assigned(SDL_GetRGB) Then result := false;
                    SDL_GetRGBA := TSDL_GetRGBA_proc(GetProcAddress(LibHandle, 'SDL_GetRGBA'));
                    If Not assigned(SDL_GetRGBA) Then result := false;
                    SDL_CalculateGammaRamp := TSDL_CalculateGammaRamp_proc(GetProcAddress(LibHandle, 'SDL_CalculateGammaRamp'));
                    If Not assigned(SDL_CalculateGammaRamp) Then result := false;
                    SDL_GetPowerInfo := TSDL_GetPowerInfo_func(GetProcAddress(LibHandle, 'SDL_GetPowerInfo'));
                    If Not assigned(SDL_GetPowerInfo) Then result := false;
                    SDL_HasIntersection := TSDL_HasIntersection_func(GetProcAddress(LibHandle, 'SDL_HasIntersection'));
                    If Not assigned(SDL_HasIntersection) Then result := false;
                    SDL_IntersectRect := TSDL_IntersectRect_func(GetProcAddress(LibHandle, 'SDL_IntersectRect'));
                    If Not assigned(SDL_IntersectRect) Then result := false;
                    SDL_UnionRect := TSDL_UnionRect_proc(GetProcAddress(LibHandle, 'SDL_UnionRect'));
                    If Not assigned(SDL_UnionRect) Then result := false;
                    SDL_EnclosePoints := TSDL_EnclosePoints_func(GetProcAddress(LibHandle, 'SDL_EnclosePoints'));
                    If Not assigned(SDL_EnclosePoints) Then result := false;
                    SDL_IntersectRectAndLine := TSDL_IntersectRectAndLine_func(GetProcAddress(LibHandle, 'SDL_IntersectRectAndLine'));
                    If Not assigned(SDL_IntersectRectAndLine) Then result := false;
                    SDL_HasIntersectionF := TSDL_HasIntersectionF_func(GetProcAddress(LibHandle, 'SDL_HasIntersectionF'));
                    If Not assigned(SDL_HasIntersectionF) Then result := false;
                    SDL_IntersectFRect := TSDL_IntersectFRect_func(GetProcAddress(LibHandle, 'SDL_IntersectFRect'));
                    If Not assigned(SDL_IntersectFRect) Then result := false;
                    SDL_UnionFRect := TSDL_UnionFRect_func(GetProcAddress(LibHandle, 'SDL_UnionFRect'));
                    If Not assigned(SDL_UnionFRect) Then result := false;
                    SDL_EncloseFPoints := TSDL_EncloseFPoints_func(GetProcAddress(LibHandle, 'SDL_EncloseFPoints'));
                    If Not assigned(SDL_EncloseFPoints) Then result := false;
                    SDL_IntersectFRectAndLine := TSDL_IntersectFRectAndLine_func(GetProcAddress(LibHandle, 'SDL_IntersectFRectAndLine'));
                    If Not assigned(SDL_IntersectFRectAndLine) Then result := false;
                    SDL_LockTexture := TSDL_LockTexture_func(GetProcAddress(LibHandle, 'SDL_LockTexture'));
                    If Not assigned(SDL_LockTexture) Then result := false;
                    SDL_LockTextureToSurface := TSDL_LockTextureToSurface_func(GetProcAddress(LibHandle, 'SDL_LockTextureToSurface'));
                    If Not assigned(SDL_LockTextureToSurface) Then result := false;
                    SDL_RenderIsClipEnabled := TSDL_RenderIsClipEnabled_func(GetProcAddress(LibHandle, 'SDL_RenderIsClipEnabled'));
                    If Not assigned(SDL_RenderIsClipEnabled) Then result := false;
                    SDL_RenderDrawPointF := TSDL_RenderDrawPointF_func(GetProcAddress(LibHandle, 'SDL_RenderDrawPointF'));
                    If Not assigned(SDL_RenderDrawPointF) Then result := false;
                    SDL_RenderDrawPointsF := TSDL_RenderDrawPointsF_func(GetProcAddress(LibHandle, 'SDL_RenderDrawPointsF'));
                    If Not assigned(SDL_RenderDrawPointsF) Then result := false;
                    SDL_RenderDrawLineF := TSDL_RenderDrawLineF_func(GetProcAddress(LibHandle, 'SDL_RenderDrawLineF'));
                    If Not assigned(SDL_RenderDrawLineF) Then result := false;
                    SDL_RenderDrawLinesF := TSDL_RenderDrawLinesF_func(GetProcAddress(LibHandle, 'SDL_RenderDrawLinesF'));
                    If Not assigned(SDL_RenderDrawLinesF) Then result := false;
                    SDL_RenderDrawRectF := TSDL_RenderDrawRectF_func(GetProcAddress(LibHandle, 'SDL_RenderDrawRectF'));
                    If Not assigned(SDL_RenderDrawRectF) Then result := false;
                    SDL_RenderDrawRectsF := TSDL_RenderDrawRectsF_func(GetProcAddress(LibHandle, 'SDL_RenderDrawRectsF'));
                    If Not assigned(SDL_RenderDrawRectsF) Then result := false;
                    SDL_RenderFillRectF := TSDL_RenderFillRectF_func(GetProcAddress(LibHandle, 'SDL_RenderFillRectF'));
                    If Not assigned(SDL_RenderFillRectF) Then result := false;
                    SDL_RenderFillRectsF := TSDL_RenderFillRectsF_func(GetProcAddress(LibHandle, 'SDL_RenderFillRectsF'));
                    If Not assigned(SDL_RenderFillRectsF) Then result := false;
                    SDL_RenderCopyF := TSDL_RenderCopyF_func(GetProcAddress(LibHandle, 'SDL_RenderCopyF'));
                    If Not assigned(SDL_RenderCopyF) Then result := false;
                    SDL_RenderCopyExF := TSDL_RenderCopyExF_func(GetProcAddress(LibHandle, 'SDL_RenderCopyExF'));
                    If Not assigned(SDL_RenderCopyExF) Then result := false;
                    SDL_RenderGetMetalLayer := TSDL_RenderGetMetalLayer_func(GetProcAddress(LibHandle, 'SDL_RenderGetMetalLayer'));
                    If Not assigned(SDL_RenderGetMetalLayer) Then result := false;
                    SDL_RenderGetMetalCommandEncoder := TSDL_RenderGetMetalCommandEncoder_func(GetProcAddress(LibHandle, 'SDL_RenderGetMetalCommandEncoder'));
                    If Not assigned(SDL_RenderGetMetalCommandEncoder) Then result := false;
                    SDL_UpdateYUVTexture := TSDL_UpdateYUVTexture_func(GetProcAddress(LibHandle, 'SDL_UpdateYUVTexture'));
                    If Not assigned(SDL_UpdateYUVTexture) Then result := false;
                    SDL_RWFromFile := TSDL_RWFromFile_func(GetProcAddress(LibHandle, 'SDL_RWFromFile'));
                    If Not assigned(SDL_RWFromFile) Then result := false;
                    SDL_RWFromFP := TSDL_RWFromFP_func(GetProcAddress(LibHandle, 'SDL_RWFromFP'));
                    If Not assigned(SDL_RWFromFP) Then result := false;
                    SDL_RWFromMem := TSDL_RWFromMem_func(GetProcAddress(LibHandle, 'SDL_RWFromMem'));
                    If Not assigned(SDL_RWFromMem) Then result := false;
                    SDL_RWFromConstMem := TSDL_RWFromConstMem_func(GetProcAddress(LibHandle, 'SDL_RWFromConstMem'));
                    If Not assigned(SDL_RWFromConstMem) Then result := false;
                    SDL_FreeRW := TSDL_FreeRW_proc(GetProcAddress(LibHandle, 'SDL_FreeRW'));
                    If Not assigned(SDL_FreeRW) Then result := false;
                    SDL_RWsize := TSDL_RWsize_func(GetProcAddress(LibHandle, 'SDL_RWsize'));
                    If Not assigned(SDL_RWsize) Then result := false;
                    SDL_RWseek := TSDL_RWseek_func(GetProcAddress(LibHandle, 'SDL_RWseek'));
                    If Not assigned(SDL_RWseek) Then result := false;
                    SDL_RWtell := TSDL_RWtell_func(GetProcAddress(LibHandle, 'SDL_RWtell'));
                    If Not assigned(SDL_RWtell) Then result := false;
                    SDL_RWread := TSDL_RWread_func(GetProcAddress(LibHandle, 'SDL_RWread'));
                    If Not assigned(SDL_RWread) Then result := false;
                    SDL_RWwrite := TSDL_RWwrite_func(GetProcAddress(LibHandle, 'SDL_RWwrite'));
                    If Not assigned(SDL_RWwrite) Then result := false;
                    SDL_RWclose := TSDL_RWclose_func(GetProcAddress(LibHandle, 'SDL_RWclose'));
                    If Not assigned(SDL_RWclose) Then result := false;
                    SDL_LoadFile_RW := TSDL_LoadFile_RW_func(GetProcAddress(LibHandle, 'SDL_LoadFile_RW'));
                    If Not assigned(SDL_LoadFile_RW) Then result := false;
                    SDL_LoadFile := TSDL_LoadFile_func(GetProcAddress(LibHandle, 'SDL_LoadFile'));
                    If Not assigned(SDL_LoadFile) Then result := false;
                    SDL_ReadU8 := TSDL_ReadU8_func(GetProcAddress(LibHandle, 'SDL_ReadU8'));
                    If Not assigned(SDL_ReadU8) Then result := false;
                    SDL_ReadLE16 := TSDL_ReadLE16_func(GetProcAddress(LibHandle, 'SDL_ReadLE16'));
                    If Not assigned(SDL_ReadLE16) Then result := false;
                    SDL_ReadBE16 := TSDL_ReadBE16_func(GetProcAddress(LibHandle, 'SDL_ReadBE16'));
                    If Not assigned(SDL_ReadBE16) Then result := false;
                    SDL_ReadLE32 := TSDL_ReadLE32_func(GetProcAddress(LibHandle, 'SDL_ReadLE32'));
                    If Not assigned(SDL_ReadLE32) Then result := false;
                    SDL_ReadBE32 := TSDL_ReadBE32_func(GetProcAddress(LibHandle, 'SDL_ReadBE32'));
                    If Not assigned(SDL_ReadBE32) Then result := false;
                    SDL_ReadLE64 := TSDL_ReadLE64_func(GetProcAddress(LibHandle, 'SDL_ReadLE64'));
                    If Not assigned(SDL_ReadLE64) Then result := false;
                    SDL_ReadBE64 := TSDL_ReadBE64_func(GetProcAddress(LibHandle, 'SDL_ReadBE64'));
                    If Not assigned(SDL_ReadBE64) Then result := false;
                    SDL_WriteU8 := TSDL_WriteU8_func(GetProcAddress(LibHandle, 'SDL_WriteU8'));
                    If Not assigned(SDL_WriteU8) Then result := false;
                    SDL_WriteLE16 := TSDL_WriteLE16_func(GetProcAddress(LibHandle, 'SDL_WriteLE16'));
                    If Not assigned(SDL_WriteLE16) Then result := false;
                    SDL_WriteBE16 := TSDL_WriteBE16_func(GetProcAddress(LibHandle, 'SDL_WriteBE16'));
                    If Not assigned(SDL_WriteBE16) Then result := false;
                    SDL_WriteLE32 := TSDL_WriteLE32_func(GetProcAddress(LibHandle, 'SDL_WriteLE32'));
                    If Not assigned(SDL_WriteLE32) Then result := false;
                    SDL_WriteBE32 := TSDL_WriteBE32_func(GetProcAddress(LibHandle, 'SDL_WriteBE32'));
                    If Not assigned(SDL_WriteBE32) Then result := false;
                    SDL_WriteLE64 := TSDL_WriteLE64_func(GetProcAddress(LibHandle, 'SDL_WriteLE64'));
                    If Not assigned(SDL_WriteLE64) Then result := false;
                    SDL_WriteBE64 := TSDL_WriteBE64_func(GetProcAddress(LibHandle, 'SDL_WriteBE64'));
                    If Not assigned(SDL_WriteBE64) Then result := false;
                    SDL_CreateShapedWindow := TSDL_CreateShapedWindow_func(GetProcAddress(LibHandle, 'SDL_CreateShapedWindow'));
                    If Not assigned(SDL_CreateShapedWindow) Then result := false;
                    SDL_IsShapedWindow := TSDL_IsShapedWindow_func(GetProcAddress(LibHandle, 'SDL_IsShapedWindow'));
                    If Not assigned(SDL_IsShapedWindow) Then result := false;
                    SDL_SetWindowShape := TSDL_SetWindowShape_func(GetProcAddress(LibHandle, 'SDL_SetWindowShape'));
                    If Not assigned(SDL_SetWindowShape) Then result := false;
                    SDL_GetShapedWindowMode := TSDL_GetShapedWindowMode_func(GetProcAddress(LibHandle, 'SDL_GetShapedWindowMode'));
                    If Not assigned(SDL_GetShapedWindowMode) Then result := false;
                    SDL_GetNumAllocations := TSDL_GetNumAllocations_func(GetProcAddress(LibHandle, 'SDL_GetNumAllocations'));
                    If Not assigned(SDL_GetNumAllocations) Then result := false;
                    SDL_malloc := TSDL_malloc_func(GetProcAddress(LibHandle, 'SDL_malloc'));
                    If Not assigned(SDL_malloc) Then result := false;
                    SDL_calloc := TSDL_calloc_func(GetProcAddress(LibHandle, 'SDL_calloc'));
                    If Not assigned(SDL_calloc) Then result := false;
                    SDL_realloc := TSDL_realloc_func(GetProcAddress(LibHandle, 'SDL_realloc'));
                    If Not assigned(SDL_realloc) Then result := false;
                    SDL_free := TSDL_free_proc(GetProcAddress(LibHandle, 'SDL_free'));
                    If Not assigned(SDL_free) Then result := false;
                    SDL_isalpha := TSDL_isalpha_func(GetProcAddress(LibHandle, 'SDL_isalpha'));
                    If Not assigned(SDL_isalpha) Then result := false;
                    SDL_isalnum := TSDL_isalnum_func(GetProcAddress(LibHandle, 'SDL_isalnum'));
                    If Not assigned(SDL_isalnum) Then result := false;
                    SDL_isblank := TSDL_isblank_func(GetProcAddress(LibHandle, 'SDL_isblank'));
                    If Not assigned(SDL_isblank) Then result := false;
                    SDL_iscntrl := TSDL_iscntrl_func(GetProcAddress(LibHandle, 'SDL_iscntrl'));
                    If Not assigned(SDL_iscntrl) Then result := false;
                    SDL_isdigit := TSDL_isdigit_func(GetProcAddress(LibHandle, 'SDL_isdigit'));
                    If Not assigned(SDL_isdigit) Then result := false;
                    SDL_isxdigit := TSDL_isxdigit_func(GetProcAddress(LibHandle, 'SDL_isxdigit'));
                    If Not assigned(SDL_isxdigit) Then result := false;
                    SDL_ispunct := TSDL_ispunct_func(GetProcAddress(LibHandle, 'SDL_ispunct'));
                    If Not assigned(SDL_ispunct) Then result := false;
                    SDL_isspace := TSDL_isspace_func(GetProcAddress(LibHandle, 'SDL_isspace'));
                    If Not assigned(SDL_isspace) Then result := false;
                    SDL_isupper := TSDL_isupper_func(GetProcAddress(LibHandle, 'SDL_isupper'));
                    If Not assigned(SDL_isupper) Then result := false;
                    SDL_islower := TSDL_islower_func(GetProcAddress(LibHandle, 'SDL_islower'));
                    If Not assigned(SDL_islower) Then result := false;
                    SDL_isprint := TSDL_isprint_func(GetProcAddress(LibHandle, 'SDL_isprint'));
                    If Not assigned(SDL_isprint) Then result := false;
                    SDL_isgraph := TSDL_isgraph_func(GetProcAddress(LibHandle, 'SDL_isgraph'));
                    If Not assigned(SDL_isgraph) Then result := false;
                    SDL_toupper := TSDL_toupper_func(GetProcAddress(LibHandle, 'SDL_toupper'));
                    If Not assigned(SDL_toupper) Then result := false;
                    SDL_tolower := TSDL_tolower_func(GetProcAddress(LibHandle, 'SDL_tolower'));
                    If Not assigned(SDL_tolower) Then result := false;
                    SDL_acos := TSDL_acos_func(GetProcAddress(LibHandle, 'SDL_acos'));
                    If Not assigned(SDL_acos) Then result := false;
                    SDL_acosf := TSDL_acosf_func(GetProcAddress(LibHandle, 'SDL_acosf'));
                    If Not assigned(SDL_acosf) Then result := false;
                    SDL_asin := TSDL_asin_func(GetProcAddress(LibHandle, 'SDL_asin'));
                    If Not assigned(SDL_asin) Then result := false;
                    SDL_asinf := TSDL_asinf_func(GetProcAddress(LibHandle, 'SDL_asinf'));
                    If Not assigned(SDL_asinf) Then result := false;
                    SDL_atan := TSDL_atan_func(GetProcAddress(LibHandle, 'SDL_atan'));
                    If Not assigned(SDL_atan) Then result := false;
                    SDL_atanf := TSDL_atanf_func(GetProcAddress(LibHandle, 'SDL_atanf'));
                    If Not assigned(SDL_atanf) Then result := false;
                    SDL_atan2 := TSDL_atan2_func(GetProcAddress(LibHandle, 'SDL_atan2'));
                    If Not assigned(SDL_atan2) Then result := false;
                    SDL_atan2f := TSDL_atan2f_func(GetProcAddress(LibHandle, 'SDL_atan2f'));
                    If Not assigned(SDL_atan2f) Then result := false;
                    SDL_ceil := TSDL_ceil_func(GetProcAddress(LibHandle, 'SDL_ceil'));
                    If Not assigned(SDL_ceil) Then result := false;
                    SDL_ceilf := TSDL_ceilf_func(GetProcAddress(LibHandle, 'SDL_ceilf'));
                    If Not assigned(SDL_ceilf) Then result := false;
                    SDL_copysign := TSDL_copysign_func(GetProcAddress(LibHandle, 'SDL_copysign'));
                    If Not assigned(SDL_copysign) Then result := false;
                    SDL_copysignf := TSDL_copysignf_func(GetProcAddress(LibHandle, 'SDL_copysignf'));
                    If Not assigned(SDL_copysignf) Then result := false;
                    SDL_cos := TSDL_cos_func(GetProcAddress(LibHandle, 'SDL_cos'));
                    If Not assigned(SDL_cos) Then result := false;
                    SDL_cosf := TSDL_cosf_func(GetProcAddress(LibHandle, 'SDL_cosf'));
                    If Not assigned(SDL_cosf) Then result := false;
                    SDL_exp := TSDL_exp_func(GetProcAddress(LibHandle, 'SDL_exp'));
                    If Not assigned(SDL_exp) Then result := false;
                    SDL_expf := TSDL_expf_func(GetProcAddress(LibHandle, 'SDL_expf'));
                    If Not assigned(SDL_expf) Then result := false;
                    SDL_fabs := TSDL_fabs_func(GetProcAddress(LibHandle, 'SDL_fabs'));
                    If Not assigned(SDL_fabs) Then result := false;
                    SDL_fabsf := TSDL_fabsf_func(GetProcAddress(LibHandle, 'SDL_fabsf'));
                    If Not assigned(SDL_fabsf) Then result := false;
                    SDL_floor := TSDL_floor_func(GetProcAddress(LibHandle, 'SDL_floor'));
                    If Not assigned(SDL_floor) Then result := false;
                    SDL_floorf := TSDL_floorf_func(GetProcAddress(LibHandle, 'SDL_floorf'));
                    If Not assigned(SDL_floorf) Then result := false;
                    SDL_fmod := TSDL_fmod_func(GetProcAddress(LibHandle, 'SDL_fmod'));
                    If Not assigned(SDL_fmod) Then result := false;
                    SDL_fmodf := TSDL_fmodf_func(GetProcAddress(LibHandle, 'SDL_fmodf'));
                    If Not assigned(SDL_fmodf) Then result := false;
                    SDL_nlog := TSDL_nlog_func(GetProcAddress(LibHandle, 'SDL_nlog'));
                    If Not assigned(SDL_nlog) Then result := false;
                    SDL_nlogf := TSDL_nlogf_func(GetProcAddress(LibHandle, 'SDL_nlogf'));
                    If Not assigned(SDL_nlogf) Then result := false;
                    SDL_log10 := TSDL_log10_func(GetProcAddress(LibHandle, 'SDL_log10'));
                    If Not assigned(SDL_log10) Then result := false;
                    SDL_log10f := TSDL_log10f_func(GetProcAddress(LibHandle, 'SDL_log10f'));
                    If Not assigned(SDL_log10f) Then result := false;
                    SDL_lround := TSDL_lround_func(GetProcAddress(LibHandle, 'SDL_lround'));
                    If Not assigned(SDL_lround) Then result := false;
                    SDL_lroundf := TSDL_lroundf_func(GetProcAddress(LibHandle, 'SDL_lroundf'));
                    If Not assigned(SDL_lroundf) Then result := false;
                    SDL_pow := TSDL_pow_func(GetProcAddress(LibHandle, 'SDL_pow'));
                    If Not assigned(SDL_pow) Then result := false;
                    SDL_powf := TSDL_powf_func(GetProcAddress(LibHandle, 'SDL_powf'));
                    If Not assigned(SDL_powf) Then result := false;
                    SDL_round := TSDL_round_func(GetProcAddress(LibHandle, 'SDL_round'));
                    If Not assigned(SDL_round) Then result := false;
                    SDL_roundf := TSDL_roundf_func(GetProcAddress(LibHandle, 'SDL_roundf'));
                    If Not assigned(SDL_roundf) Then result := false;
                    SDL_scalbn := TSDL_scalbn_func(GetProcAddress(LibHandle, 'SDL_scalbn'));
                    If Not assigned(SDL_scalbn) Then result := false;
                    SDL_scalbnf := TSDL_scalbnf_func(GetProcAddress(LibHandle, 'SDL_scalbnf'));
                    If Not assigned(SDL_scalbnf) Then result := false;
                    SDL_sin := TSDL_sin_func(GetProcAddress(LibHandle, 'SDL_sin'));
                    If Not assigned(SDL_sin) Then result := false;
                    SDL_sinf := TSDL_sinf_func(GetProcAddress(LibHandle, 'SDL_sinf'));
                    If Not assigned(SDL_sinf) Then result := false;
                    SDL_sqrt := TSDL_sqrt_func(GetProcAddress(LibHandle, 'SDL_sqrt'));
                    If Not assigned(SDL_sqrt) Then result := false;
                    SDL_sqrtf := TSDL_sqrtf_func(GetProcAddress(LibHandle, 'SDL_sqrtf'));
                    If Not assigned(SDL_sqrtf) Then result := false;
                    SDL_tan := TSDL_tan_func(GetProcAddress(LibHandle, 'SDL_tan'));
                    If Not assigned(SDL_tan) Then result := false;
                    SDL_tanf := TSDL_tanf_func(GetProcAddress(LibHandle, 'SDL_tanf'));
                    If Not assigned(SDL_tanf) Then result := false;
                    SDL_trunc := TSDL_trunc_func(GetProcAddress(LibHandle, 'SDL_trunc'));
                    If Not assigned(SDL_trunc) Then result := false;
                    SDL_truncf := TSDL_truncf_func(GetProcAddress(LibHandle, 'SDL_truncf'));
                    If Not assigned(SDL_truncf) Then result := false;
                    SDL_iconv_string := TSDL_iconv_string_func(GetProcAddress(LibHandle, 'SDL_iconv_string'));
                    If Not assigned(SDL_iconv_string) Then result := false;
                    SDL_iconv_open := TSDL_iconv_open_func(GetProcAddress(LibHandle, 'SDL_iconv_open'));
                    If Not assigned(SDL_iconv_open) Then result := false;
                    SDL_iconv_close := TSDL_iconv_close_func(GetProcAddress(LibHandle, 'SDL_iconv_close'));
                    If Not assigned(SDL_iconv_close) Then result := false;
                    SDL_iconv := TSDL_iconv_func(GetProcAddress(LibHandle, 'SDL_iconv'));
                    If Not assigned(SDL_iconv) Then result := false;
                    SDL_CreateRGBSurface := TSDL_CreateRGBSurface_func(GetProcAddress(LibHandle, 'SDL_CreateRGBSurface'));
                    If Not assigned(SDL_CreateRGBSurface) Then result := false;
                    SDL_CreateRGBSurfaceWithFormat := TSDL_CreateRGBSurfaceWithFormat_func(GetProcAddress(LibHandle, 'SDL_CreateRGBSurfaceWithFormat'));
                    If Not assigned(SDL_CreateRGBSurfaceWithFormat) Then result := false;
                    SDL_CreateRGBSurfaceFrom := TSDL_CreateRGBSurfaceFrom_func(GetProcAddress(LibHandle, 'SDL_CreateRGBSurfaceFrom'));
                    If Not assigned(SDL_CreateRGBSurfaceFrom) Then result := false;
                    SDL_CreateRGBSurfaceWithFormatFrom := TSDL_CreateRGBSurfaceWithFormatFrom_func(GetProcAddress(LibHandle, 'SDL_CreateRGBSurfaceWithFormatFrom'));
                    If Not assigned(SDL_CreateRGBSurfaceWithFormatFrom) Then result := false;
                    SDL_FreeSurface := TSDL_FreeSurface_proc(GetProcAddress(LibHandle, 'SDL_FreeSurface'));
                    If Not assigned(SDL_FreeSurface) Then result := false;
                    SDL_SetSurfacePalette := TSDL_SetSurfacePalette_func(GetProcAddress(LibHandle, 'SDL_SetSurfacePalette'));
                    If Not assigned(SDL_SetSurfacePalette) Then result := false;
                    SDL_LockSurface := TSDL_LockSurface_func(GetProcAddress(LibHandle, 'SDL_LockSurface'));
                    If Not assigned(SDL_LockSurface) Then result := false;
                    SDL_UnlockSurface := TSDL_UnlockSurface_proc(GetProcAddress(LibHandle, 'SDL_UnlockSurface'));
                    If Not assigned(SDL_UnlockSurface) Then result := false;
                    SDL_LoadBMP_RW := TSDL_LoadBMP_RW_func(GetProcAddress(LibHandle, 'SDL_LoadBMP_RW'));
                    If Not assigned(SDL_LoadBMP_RW) Then result := false;
                    SDL_SaveBMP_RW := TSDL_SaveBMP_RW_func(GetProcAddress(LibHandle, 'SDL_SaveBMP_RW'));
                    If Not assigned(SDL_SaveBMP_RW) Then result := false;
                    SDL_SetSurfaceRLE := TSDL_SetSurfaceRLE_func(GetProcAddress(LibHandle, 'SDL_SetSurfaceRLE'));
                    If Not assigned(SDL_SetSurfaceRLE) Then result := false;
                    SDL_HasSurfaceRLE := TSDL_HasSurfaceRLE_func(GetProcAddress(LibHandle, 'SDL_HasSurfaceRLE'));
                    If Not assigned(SDL_HasSurfaceRLE) Then result := false;
                    SDL_SetColorKey := TSDL_SetColorKey_func(GetProcAddress(LibHandle, 'SDL_SetColorKey'));
                    If Not assigned(SDL_SetColorKey) Then result := false;
                    SDL_HasColorKey := TSDL_HasColorKey_func(GetProcAddress(LibHandle, 'SDL_HasColorKey'));
                    If Not assigned(SDL_HasColorKey) Then result := false;
                    SDL_GetColorKey := TSDL_GetColorKey_func(GetProcAddress(LibHandle, 'SDL_GetColorKey'));
                    If Not assigned(SDL_GetColorKey) Then result := false;
                    SDL_SetSurfaceColorMod := TSDL_SetSurfaceColorMod_func(GetProcAddress(LibHandle, 'SDL_SetSurfaceColorMod'));
                    If Not assigned(SDL_SetSurfaceColorMod) Then result := false;
                    SDL_GetSurfaceColorMod := TSDL_GetSurfaceColorMod_func(GetProcAddress(LibHandle, 'SDL_GetSurfaceColorMod'));
                    If Not assigned(SDL_GetSurfaceColorMod) Then result := false;
                    SDL_SetSurfaceAlphaMod := TSDL_SetSurfaceAlphaMod_func(GetProcAddress(LibHandle, 'SDL_SetSurfaceAlphaMod'));
                    If Not assigned(SDL_SetSurfaceAlphaMod) Then result := false;
                    SDL_GetSurfaceAlphaMod := TSDL_GetSurfaceAlphaMod_func(GetProcAddress(LibHandle, 'SDL_GetSurfaceAlphaMod'));
                    If Not assigned(SDL_GetSurfaceAlphaMod) Then result := false;
                    SDL_SetSurfaceBlendMode := TSDL_SetSurfaceBlendMode_func(GetProcAddress(LibHandle, 'SDL_SetSurfaceBlendMode'));
                    If Not assigned(SDL_SetSurfaceBlendMode) Then result := false;
                    SDL_GetSurfaceBlendMode := TSDL_GetSurfaceBlendMode_func(GetProcAddress(LibHandle, 'SDL_GetSurfaceBlendMode'));
                    If Not assigned(SDL_GetSurfaceBlendMode) Then result := false;
                    SDL_SetClipRect := TSDL_SetClipRect_func(GetProcAddress(LibHandle, 'SDL_SetClipRect'));
                    If Not assigned(SDL_SetClipRect) Then result := false;
                    SDL_GetClipRect := TSDL_GetClipRect_proc(GetProcAddress(LibHandle, 'SDL_GetClipRect'));
                    If Not assigned(SDL_GetClipRect) Then result := false;
                    SDL_DuplicateSurface := TSDL_DuplicateSurface_func(GetProcAddress(LibHandle, 'SDL_DuplicateSurface'));
                    If Not assigned(SDL_DuplicateSurface) Then result := false;
                    SDL_ConvertSurface := TSDL_ConvertSurface_func(GetProcAddress(LibHandle, 'SDL_ConvertSurface'));
                    If Not assigned(SDL_ConvertSurface) Then result := false;
                    SDL_ConvertSurfaceFormat := TSDL_ConvertSurfaceFormat_func(GetProcAddress(LibHandle, 'SDL_ConvertSurfaceFormat'));
                    If Not assigned(SDL_ConvertSurfaceFormat) Then result := false;
                    SDL_ConvertPixels := TSDL_ConvertPixels_func(GetProcAddress(LibHandle, 'SDL_ConvertPixels'));
                    If Not assigned(SDL_ConvertPixels) Then result := false;
                    SDL_FillRect := TSDL_FillRect_func(GetProcAddress(LibHandle, 'SDL_FillRect'));
                    If Not assigned(SDL_FillRect) Then result := false;
                    SDL_FillRects := TSDL_FillRects_func(GetProcAddress(LibHandle, 'SDL_FillRects'));
                    If Not assigned(SDL_FillRects) Then result := false;
                    SDL_BlitSurface := TSDL_BlitSurface_func(GetProcAddress(LibHandle, 'SDL_BlitSurface'));
                    If Not assigned(SDL_BlitSurface) Then result := false;
                    SDL_UpperBlit := TSDL_UpperBlit_func(GetProcAddress(LibHandle, 'SDL_UpperBlit'));
                    If Not assigned(SDL_UpperBlit) Then result := false;
                    SDL_LowerBlit := TSDL_LowerBlit_func(GetProcAddress(LibHandle, 'SDL_LowerBlit'));
                    If Not assigned(SDL_LowerBlit) Then result := false;
                    SDL_SoftStretch := TSDL_SoftStretch_func(GetProcAddress(LibHandle, 'SDL_SoftStretch'));
                    If Not assigned(SDL_SoftStretch) Then result := false;
                    SDL_BlitSurfaceScaled := TSDL_BlitSurfaceScaled_func(GetProcAddress(LibHandle, 'SDL_BlitSurfaceScaled'));
                    If Not assigned(SDL_BlitSurfaceScaled) Then result := false;
                    SDL_UpperBlitScaled := TSDL_UpperBlitScaled_func(GetProcAddress(LibHandle, 'SDL_UpperBlitScaled'));
                    If Not assigned(SDL_UpperBlitScaled) Then result := false;
                    SDL_LowerBlitScaled := TSDL_LowerBlitScaled_func(GetProcAddress(LibHandle, 'SDL_LowerBlitScaled'));
                    If Not assigned(SDL_LowerBlitScaled) Then result := false;
                    SDL_SetYUVConversionMode := TSDL_SetYUVConversionMode_proc(GetProcAddress(LibHandle, 'SDL_SetYUVConversionMode'));
                    If Not assigned(SDL_SetYUVConversionMode) Then result := false;
                    SDL_GetYUVConversionModeForResolution := TSDL_GetYUVConversionModeForResolution_func(GetProcAddress(LibHandle, 'SDL_GetYUVConversionModeForResolution'));
                    If Not assigned(SDL_GetYUVConversionModeForResolution) Then result := false;
                    SDL_SetWindowsMessageHook := TSDL_SetWindowsMessageHook_proc(GetProcAddress(LibHandle, 'SDL_SetWindowsMessageHook'));
                    If Not assigned(SDL_SetWindowsMessageHook) Then result := false;
                    SDL_Direct3D9GetAdapterIndex := TSDL_Direct3D9GetAdapterIndex_func(GetProcAddress(LibHandle, 'SDL_Direct3D9GetAdapterIndex'));
                    If Not assigned(SDL_Direct3D9GetAdapterIndex) Then result := false;
                    SDL_RenderGetD3D9Device := TSDL_RenderGetD3D9Device_func(GetProcAddress(LibHandle, 'SDL_RenderGetD3D9Device'));
                    If Not assigned(SDL_RenderGetD3D9Device) Then result := false;
                    SDL_RenderGetD3D11Device := TSDL_RenderGetD3D11Device_func(GetProcAddress(LibHandle, 'SDL_RenderGetD3D11Device'));
                    If Not assigned(SDL_RenderGetD3D11Device) Then result := false;
                    SDL_RenderGetD3D12Device := TSDL_RenderGetD3D12Device_func(GetProcAddress(LibHandle, 'SDL_RenderGetD3D12Device'));
                    If Not assigned(SDL_RenderGetD3D12Device) Then result := false;
                    SDL_DXGIGetOutputInfo := TSDL_DXGIGetOutputInfo_func(GetProcAddress(LibHandle, 'SDL_DXGIGetOutputInfo'));
                    If Not assigned(SDL_DXGIGetOutputInfo) Then result := false; //*)
{$IFDEF LINUX}
    SDL_LinuxSetThreadPriority := TSDL_LinuxSetThreadPriority_func(GetProcAddress(LibHandle, 'SDL_LinuxSetThreadPriority'));
    If Not assigned(SDL_LinuxSetThreadPriority) Then result := false;
    SDL_LinuxSetThreadPriorityAndPolicy := TSDL_LinuxSetThreadPriorityAndPolicy_func(GetProcAddress(LibHandle, 'SDL_LinuxSetThreadPriorityAndPolicy'));
    If Not assigned(SDL_LinuxSetThreadPriorityAndPolicy) Then result := false;
{$IFDEF Windows}
    SDL_iPhoneSetAnimationCallback := TSDL_iPhoneSetAnimationCallback_func(GetProcAddress(LibHandle, 'SDL_iPhoneSetAnimationCallback'));
    If Not assigned(SDL_iPhoneSetAnimationCallback) Then result := false;
    SDL_iPhoneSetEventPump := TSDL_iPhoneSetEventPump_proc(GetProcAddress(LibHandle, 'SDL_iPhoneSetEventPump'));
    If Not assigned(SDL_iPhoneSetEventPump) Then result := false;
    SDL_AndroidGetJNIEnv := TSDL_AndroidGetJNIEnv_func(GetProcAddress(LibHandle, 'SDL_AndroidGetJNIEnv'));
    If Not assigned(SDL_AndroidGetJNIEnv) Then result := false;
    SDL_AndroidGetActivity := TSDL_AndroidGetActivity_func(GetProcAddress(LibHandle, 'SDL_AndroidGetActivity'));
    If Not assigned(SDL_AndroidGetActivity) Then result := false;
    SDL_GetAndroidSDKVersion := TSDL_GetAndroidSDKVersion_func(GetProcAddress(LibHandle, 'SDL_GetAndroidSDKVersion'));
    If Not assigned(SDL_GetAndroidSDKVersion) Then result := false;
    SDL_IsAndroidTV := TSDL_IsAndroidTV_func(GetProcAddress(LibHandle, 'SDL_IsAndroidTV'));
    If Not assigned(SDL_IsAndroidTV) Then result := false;
    SDL_IsChromebook := TSDL_IsChromebook_func(GetProcAddress(LibHandle, 'SDL_IsChromebook'));
    If Not assigned(SDL_IsChromebook) Then result := false;
    SDL_IsDeXMode := TSDL_IsDeXMode_func(GetProcAddress(LibHandle, 'SDL_IsDeXMode'));
    If Not assigned(SDL_IsDeXMode) Then result := false;
    SDL_AndroidBackButton := TSDL_AndroidBackButton_proc(GetProcAddress(LibHandle, 'SDL_AndroidBackButton'));
    If Not assigned(SDL_AndroidBackButton) Then result := false;
    SDL_AndroidGetInternalStoragePath := TSDL_AndroidGetInternalStoragePath_func(GetProcAddress(LibHandle, 'SDL_AndroidGetInternalStoragePath'));
    If Not assigned(SDL_AndroidGetInternalStoragePath) Then result := false;
    SDL_AndroidGetExternalStorageState := TSDL_AndroidGetExternalStorageState_func(GetProcAddress(LibHandle, 'SDL_AndroidGetExternalStorageState'));
    If Not assigned(SDL_AndroidGetExternalStorageState) Then result := false;
    SDL_AndroidGetExternalStoragePath := TSDL_AndroidGetExternalStoragePath_func(GetProcAddress(LibHandle, 'SDL_AndroidGetExternalStoragePath'));
    If Not assigned(SDL_AndroidGetExternalStoragePath) Then result := false;
    SDL_AndroidRequestPermission := TSDL_AndroidRequestPermission_func(GetProcAddress(LibHandle, 'SDL_AndroidRequestPermission'));
    If Not assigned(SDL_AndroidRequestPermission) Then result := false;
    SDL_AndroidShowToast := TSDL_AndroidShowToast_func(GetProcAddress(LibHandle, 'SDL_AndroidShowToast'));
    If Not assigned(SDL_AndroidShowToast) Then result := false;
    SDL_AndroidSendMessage := TSDL_AndroidSendMessage_func(GetProcAddress(LibHandle, 'SDL_AndroidSendMessage'));
    If Not assigned(SDL_AndroidSendMessage) Then result := false;
    SDL_WinRTGetFSPathUNICODE := TSDL_WinRTGetFSPathUNICODE_func(GetProcAddress(LibHandle, 'SDL_WinRTGetFSPathUNICODE'));
    If Not assigned(SDL_WinRTGetFSPathUNICODE) Then result := false;
    SDL_WinRTGetFSPathUTF8 := TSDL_WinRTGetFSPathUTF8_func(GetProcAddress(LibHandle, 'SDL_WinRTGetFSPathUTF8'));
    If Not assigned(SDL_WinRTGetFSPathUTF8) Then result := false;
    SDL_WinRTGetDeviceFamily := TSDL_WinRTGetDeviceFamily_func(GetProcAddress(LibHandle, 'SDL_WinRTGetDeviceFamily'));
    If Not assigned(SDL_WinRTGetDeviceFamily) Then result := false;
{$ENDIF}
{$ENDIF}
    SDL_IsTablet := TSDL_IsTablet_func(GetProcAddress(LibHandle, 'SDL_IsTablet'));
    If Not assigned(SDL_IsTablet) Then result := false;
    SDL_PumpEvents := TSDL_PumpEvents_proc(GetProcAddress(LibHandle, 'SDL_PumpEvents'));
    If Not assigned(SDL_PumpEvents) Then result := false;
    SDL_PollEvent := TSDL_PollEvent_func(GetProcAddress(LibHandle, 'SDL_PollEvent'));
    If Not assigned(SDL_PollEvent) Then result := false;
    SDL_EventState := TSDL_EventState_func(GetProcAddress(LibHandle, 'SDL_EventState'));
    If Not assigned(SDL_EventState) Then result := false;
    SDL_GetWindowWMInfo := TSDL_GetWindowWMInfo_func(GetProcAddress(LibHandle, 'SDL_GetWindowWMInfo'));
    If Not assigned(SDL_GetWindowWMInfo) Then result := false;
    SDL_CreateThread := TSDL_CreateThread_func(GetProcAddress(LibHandle, 'SDL_CreateThread'));
    If Not assigned(SDL_CreateThread) Then result := false;
    SDL_CreateThreadWithStackSize := TSDL_CreateThreadWithStackSize_func(GetProcAddress(LibHandle, 'SDL_CreateThreadWithStackSize'));
    If Not assigned(SDL_CreateThreadWithStackSize) Then result := false;
    SDL_CreateThread := TSDL_CreateThread_func(GetProcAddress(LibHandle, 'SDL_CreateThread'));
    If Not assigned(SDL_CreateThread) Then result := false;
    SDL_CreateThreadWithStackSize := TSDL_CreateThreadWithStackSize_func(GetProcAddress(LibHandle, 'SDL_CreateThreadWithStackSize'));
    If Not assigned(SDL_CreateThreadWithStackSize) Then result := false;
    SDL_GetThreadName := TSDL_GetThreadName_func(GetProcAddress(LibHandle, 'SDL_GetThreadName'));
    If Not assigned(SDL_GetThreadName) Then result := false;
    SDL_GetThreadID := TSDL_GetThreadID_func(GetProcAddress(LibHandle, 'SDL_GetThreadID'));
    If Not assigned(SDL_GetThreadID) Then result := false;
    SDL_SetThreadPriority := TSDL_SetThreadPriority_func(GetProcAddress(LibHandle, 'SDL_SetThreadPriority'));
    If Not assigned(SDL_SetThreadPriority) Then result := false;
    SDL_WaitThread := TSDL_WaitThread_proc(GetProcAddress(LibHandle, 'SDL_WaitThread'));
    If Not assigned(SDL_WaitThread) Then result := false;
    SDL_DetachThread := TSDL_DetachThread_proc(GetProcAddress(LibHandle, 'SDL_DetachThread'));
    If Not assigned(SDL_DetachThread) Then result := false;
    SDL_TLSGet := TSDL_TLSGet_func(GetProcAddress(LibHandle, 'SDL_TLSGet'));
    If Not assigned(SDL_TLSGet) Then result := false;
    SDL_TLSSet := TSDL_TLSSet_func(GetProcAddress(LibHandle, 'SDL_TLSSet'));
    If Not assigned(SDL_TLSSet) Then result := false;
    SDL_Delay := TSDL_Delay_proc(GetProcAddress(LibHandle, 'SDL_Delay'));
    If Not assigned(SDL_Delay) Then result := false;
    SDL_AddTimer := TSDL_AddTimer_func(GetProcAddress(LibHandle, 'SDL_AddTimer'));
    If Not assigned(SDL_AddTimer) Then result := false;
    SDL_RemoveTimer := TSDL_RemoveTimer_func(GetProcAddress(LibHandle, 'SDL_RemoveTimer'));
    If Not assigned(SDL_RemoveTimer) Then result := false;
    SDL_GetNumTouchDevices := TSDL_GetNumTouchDevices_func(GetProcAddress(LibHandle, 'SDL_GetNumTouchDevices'));
    If Not assigned(SDL_GetNumTouchDevices) Then result := false;
    SDL_GetTouchDevice := TSDL_GetTouchDevice_func(GetProcAddress(LibHandle, 'SDL_GetTouchDevice'));
    If Not assigned(SDL_GetTouchDevice) Then result := false;
    (*    SDL_GetTouchName := TSDL_GetTouchName_func(GetProcAddress(LibHandle, 'SDL_GetTouchName'));
        If Not assigned(SDL_GetTouchName) Then result := false;
        SDL_GetTouchDeviceType := TSDL_GetTouchDeviceType_func(GetProcAddress(LibHandle, 'SDL_GetTouchDeviceType'));
        If Not assigned(SDL_GetTouchDeviceType) Then result := false;
        SDL_GetNumTouchFingers := TSDL_GetNumTouchFingers_func(GetProcAddress(LibHandle, 'SDL_GetNumTouchFingers'));
        If Not assigned(SDL_GetNumTouchFingers) Then result := false;
        SDL_GetTouchFinger := TSDL_GetTouchFinger_func(GetProcAddress(LibHandle, 'SDL_GetTouchFinger'));
        If Not assigned(SDL_GetTouchFinger) Then result := false; //*)
    SDL_GetVersion := TSDL_GetVersion_proc(GetProcAddress(LibHandle, 'SDL_GetVersion'));
    If Not assigned(SDL_GetVersion) Then result := false;
    (*    SDL_GetVideoDriver := TSDL_GetVideoDriver_func(GetProcAddress(LibHandle, 'SDL_GetVideoDriver'));
        If Not assigned(SDL_GetVideoDriver) Then result := false;
        SDL_VideoInit := TSDL_VideoInit_func(GetProcAddress(LibHandle, 'SDL_VideoInit'));
        If Not assigned(SDL_VideoInit) Then result := false;
        SDL_GetDisplayName := TSDL_GetDisplayName_func(GetProcAddress(LibHandle, 'SDL_GetDisplayName'));
        If Not assigned(SDL_GetDisplayName) Then result := false;
        SDL_GetDisplayBounds := TSDL_GetDisplayBounds_func(GetProcAddress(LibHandle, 'SDL_GetDisplayBounds'));
        If Not assigned(SDL_GetDisplayBounds) Then result := false;
        SDL_GetDisplayUsableBounds := TSDL_GetDisplayUsableBounds_func(GetProcAddress(LibHandle, 'SDL_GetDisplayUsableBounds'));
        If Not assigned(SDL_GetDisplayUsableBounds) Then result := false;
        SDL_GetDisplayDPI := TSDL_GetDisplayDPI_func(GetProcAddress(LibHandle, 'SDL_GetDisplayDPI'));
        If Not assigned(SDL_GetDisplayDPI) Then result := false;
        SDL_GetDisplayOrientation := TSDL_GetDisplayOrientation_func(GetProcAddress(LibHandle, 'SDL_GetDisplayOrientation'));
        If Not assigned(SDL_GetDisplayOrientation) Then result := false;
        SDL_GetNumDisplayModes := TSDL_GetNumDisplayModes_func(GetProcAddress(LibHandle, 'SDL_GetNumDisplayModes'));
        If Not assigned(SDL_GetNumDisplayModes) Then result := false;
        SDL_GetDisplayMode := TSDL_GetDisplayMode_func(GetProcAddress(LibHandle, 'SDL_GetDisplayMode'));
        If Not assigned(SDL_GetDisplayMode) Then result := false;
        SDL_GetDesktopDisplayMode := TSDL_GetDesktopDisplayMode_func(GetProcAddress(LibHandle, 'SDL_GetDesktopDisplayMode'));
        If Not assigned(SDL_GetDesktopDisplayMode) Then result := false;
        SDL_GetCurrentDisplayMode := TSDL_GetCurrentDisplayMode_func(GetProcAddress(LibHandle, 'SDL_GetCurrentDisplayMode'));
        If Not assigned(SDL_GetCurrentDisplayMode) Then result := false;
        SDL_GetClosestDisplayMode := TSDL_GetClosestDisplayMode_func(GetProcAddress(LibHandle, 'SDL_GetClosestDisplayMode'));
        If Not assigned(SDL_GetClosestDisplayMode) Then result := false;
        SDL_GetPointDisplayIndex := TSDL_GetPointDisplayIndex_func(GetProcAddress(LibHandle, 'SDL_GetPointDisplayIndex'));
        If Not assigned(SDL_GetPointDisplayIndex) Then result := false;
        SDL_GetRectDisplayIndex := TSDL_GetRectDisplayIndex_func(GetProcAddress(LibHandle, 'SDL_GetRectDisplayIndex'));
        If Not assigned(SDL_GetRectDisplayIndex) Then result := false;
        SDL_GetWindowDisplayIndex := TSDL_GetWindowDisplayIndex_func(GetProcAddress(LibHandle, 'SDL_GetWindowDisplayIndex'));
        If Not assigned(SDL_GetWindowDisplayIndex) Then result := false;
        SDL_SetWindowDisplayMode := TSDL_SetWindowDisplayMode_func(GetProcAddress(LibHandle, 'SDL_SetWindowDisplayMode'));
        If Not assigned(SDL_SetWindowDisplayMode) Then result := false;
        SDL_GetWindowDisplayMode := TSDL_GetWindowDisplayMode_func(GetProcAddress(LibHandle, 'SDL_GetWindowDisplayMode'));
        If Not assigned(SDL_GetWindowDisplayMode) Then result := false;
        SDL_GetWindowICCProfile := TSDL_GetWindowICCProfile_func(GetProcAddress(LibHandle, 'SDL_GetWindowICCProfile'));
        If Not assigned(SDL_GetWindowICCProfile) Then result := false;
        SDL_GetWindowPixelFormat := TSDL_GetWindowPixelFormat_func(GetProcAddress(LibHandle, 'SDL_GetWindowPixelFormat'));
        If Not assigned(SDL_GetWindowPixelFormat) Then result := false;
        SDL_CreateWindow := TSDL_CreateWindow_func(GetProcAddress(LibHandle, 'SDL_CreateWindow'));
        If Not assigned(SDL_CreateWindow) Then result := false;
        SDL_CreateWindowFrom := TSDL_CreateWindowFrom_func(GetProcAddress(LibHandle, 'SDL_CreateWindowFrom'));
        If Not assigned(SDL_CreateWindowFrom) Then result := false;
        SDL_GetWindowID := TSDL_GetWindowID_func(GetProcAddress(LibHandle, 'SDL_GetWindowID'));
        If Not assigned(SDL_GetWindowID) Then result := false;
        SDL_GetWindowFromID := TSDL_GetWindowFromID_func(GetProcAddress(LibHandle, 'SDL_GetWindowFromID'));
        If Not assigned(SDL_GetWindowFromID) Then result := false;
        SDL_GetWindowFlags := TSDL_GetWindowFlags_func(GetProcAddress(LibHandle, 'SDL_GetWindowFlags'));
        If Not assigned(SDL_GetWindowFlags) Then result := false;
        SDL_SetWindowTitle := TSDL_SetWindowTitle_proc(GetProcAddress(LibHandle, 'SDL_SetWindowTitle'));
        If Not assigned(SDL_SetWindowTitle) Then result := false;
        SDL_GetWindowTitle := TSDL_GetWindowTitle_func(GetProcAddress(LibHandle, 'SDL_GetWindowTitle'));
        If Not assigned(SDL_GetWindowTitle) Then result := false;
        SDL_SetWindowIcon := TSDL_SetWindowIcon_proc(GetProcAddress(LibHandle, 'SDL_SetWindowIcon'));
        If Not assigned(SDL_SetWindowIcon) Then result := false;
        SDL_SetWindowData := TSDL_SetWindowData_func(GetProcAddress(LibHandle, 'SDL_SetWindowData'));
        If Not assigned(SDL_SetWindowData) Then result := false;
        SDL_GetWindowData := TSDL_GetWindowData_func(GetProcAddress(LibHandle, 'SDL_GetWindowData'));
        If Not assigned(SDL_GetWindowData) Then result := false;
        SDL_SetWindowPosition := TSDL_SetWindowPosition_proc(GetProcAddress(LibHandle, 'SDL_SetWindowPosition'));
        If Not assigned(SDL_SetWindowPosition) Then result := false;
        SDL_GetWindowPosition := TSDL_GetWindowPosition_proc(GetProcAddress(LibHandle, 'SDL_GetWindowPosition'));
        If Not assigned(SDL_GetWindowPosition) Then result := false;
        SDL_SetWindowSize := TSDL_SetWindowSize_proc(GetProcAddress(LibHandle, 'SDL_SetWindowSize'));
        If Not assigned(SDL_SetWindowSize) Then result := false;
        SDL_GetWindowSize := TSDL_GetWindowSize_proc(GetProcAddress(LibHandle, 'SDL_GetWindowSize'));
        If Not assigned(SDL_GetWindowSize) Then result := false;
        SDL_GetWindowBordersSize := TSDL_GetWindowBordersSize_func(GetProcAddress(LibHandle, 'SDL_GetWindowBordersSize'));
        If Not assigned(SDL_GetWindowBordersSize) Then result := false;
        SDL_GetWindowSizeInPixels := TSDL_GetWindowSizeInPixels_proc(GetProcAddress(LibHandle, 'SDL_GetWindowSizeInPixels'));
        If Not assigned(SDL_GetWindowSizeInPixels) Then result := false;
        SDL_SetWindowMinimumSize := TSDL_SetWindowMinimumSize_proc(GetProcAddress(LibHandle, 'SDL_SetWindowMinimumSize'));
        If Not assigned(SDL_SetWindowMinimumSize) Then result := false;
        SDL_GetWindowMinimumSize := TSDL_GetWindowMinimumSize_proc(GetProcAddress(LibHandle, 'SDL_GetWindowMinimumSize'));
        If Not assigned(SDL_GetWindowMinimumSize) Then result := false;
        SDL_SetWindowMaximumSize := TSDL_SetWindowMaximumSize_proc(GetProcAddress(LibHandle, 'SDL_SetWindowMaximumSize'));
        If Not assigned(SDL_SetWindowMaximumSize) Then result := false;
        SDL_GetWindowMaximumSize := TSDL_GetWindowMaximumSize_proc(GetProcAddress(LibHandle, 'SDL_GetWindowMaximumSize'));
        If Not assigned(SDL_GetWindowMaximumSize) Then result := false;
        SDL_SetWindowBordered := TSDL_SetWindowBordered_proc(GetProcAddress(LibHandle, 'SDL_SetWindowBordered'));
        If Not assigned(SDL_SetWindowBordered) Then result := false;
        SDL_SetWindowResizable := TSDL_SetWindowResizable_proc(GetProcAddress(LibHandle, 'SDL_SetWindowResizable'));
        If Not assigned(SDL_SetWindowResizable) Then result := false;
        SDL_SetWindowAlwaysOnTop := TSDL_SetWindowAlwaysOnTop_proc(GetProcAddress(LibHandle, 'SDL_SetWindowAlwaysOnTop'));
        If Not assigned(SDL_SetWindowAlwaysOnTop) Then result := false;
        SDL_ShowWindow := TSDL_ShowWindow_proc(GetProcAddress(LibHandle, 'SDL_ShowWindow'));
        If Not assigned(SDL_ShowWindow) Then result := false;
        SDL_HideWindow := TSDL_HideWindow_proc(GetProcAddress(LibHandle, 'SDL_HideWindow'));
        If Not assigned(SDL_HideWindow) Then result := false;
        SDL_RaiseWindow := TSDL_RaiseWindow_proc(GetProcAddress(LibHandle, 'SDL_RaiseWindow'));
        If Not assigned(SDL_RaiseWindow) Then result := false;
        SDL_MaximizeWindow := TSDL_MaximizeWindow_proc(GetProcAddress(LibHandle, 'SDL_MaximizeWindow'));
        If Not assigned(SDL_MaximizeWindow) Then result := false;
        SDL_MinimizeWindow := TSDL_MinimizeWindow_proc(GetProcAddress(LibHandle, 'SDL_MinimizeWindow'));
        If Not assigned(SDL_MinimizeWindow) Then result := false;
        SDL_RestoreWindow := TSDL_RestoreWindow_proc(GetProcAddress(LibHandle, 'SDL_RestoreWindow'));
        If Not assigned(SDL_RestoreWindow) Then result := false;
        SDL_SetWindowFullscreen := TSDL_SetWindowFullscreen_func(GetProcAddress(LibHandle, 'SDL_SetWindowFullscreen'));
        If Not assigned(SDL_SetWindowFullscreen) Then result := false;
        SDL_HasWindowSurface := TSDL_HasWindowSurface_func(GetProcAddress(LibHandle, 'SDL_HasWindowSurface'));
        If Not assigned(SDL_HasWindowSurface) Then result := false;
        SDL_GetWindowSurface := TSDL_GetWindowSurface_func(GetProcAddress(LibHandle, 'SDL_GetWindowSurface'));
        If Not assigned(SDL_GetWindowSurface) Then result := false;
        SDL_UpdateWindowSurface := TSDL_UpdateWindowSurface_func(GetProcAddress(LibHandle, 'SDL_UpdateWindowSurface'));
        If Not assigned(SDL_UpdateWindowSurface) Then result := false;
        SDL_UpdateWindowSurfaceRects := TSDL_UpdateWindowSurfaceRects_func(GetProcAddress(LibHandle, 'SDL_UpdateWindowSurfaceRects'));
        If Not assigned(SDL_UpdateWindowSurfaceRects) Then result := false;
        SDL_DestroyWindowSurface := TSDL_DestroyWindowSurface_func(GetProcAddress(LibHandle, 'SDL_DestroyWindowSurface'));
        If Not assigned(SDL_DestroyWindowSurface) Then result := false;
        SDL_SetWindowGrab := TSDL_SetWindowGrab_proc(GetProcAddress(LibHandle, 'SDL_SetWindowGrab'));
        If Not assigned(SDL_SetWindowGrab) Then result := false;
        SDL_GetWindowGrab := TSDL_GetWindowGrab_func(GetProcAddress(LibHandle, 'SDL_GetWindowGrab'));
        If Not assigned(SDL_GetWindowGrab) Then result := false;
        SDL_SetWindowKeyboardGrab := TSDL_SetWindowKeyboardGrab_proc(GetProcAddress(LibHandle, 'SDL_SetWindowKeyboardGrab'));
        If Not assigned(SDL_SetWindowKeyboardGrab) Then result := false;
        SDL_GetWindowKeyboardGrab := TSDL_GetWindowKeyboardGrab_func(GetProcAddress(LibHandle, 'SDL_GetWindowKeyboardGrab'));
        If Not assigned(SDL_GetWindowKeyboardGrab) Then result := false;
        SDL_SetWindowMouseGrab := TSDL_SetWindowMouseGrab_proc(GetProcAddress(LibHandle, 'SDL_SetWindowMouseGrab'));
        If Not assigned(SDL_SetWindowMouseGrab) Then result := false;
        SDL_GetWindowMouseGrab := TSDL_GetWindowMouseGrab_func(GetProcAddress(LibHandle, 'SDL_GetWindowMouseGrab'));
        If Not assigned(SDL_GetWindowMouseGrab) Then result := false;
        SDL_SetWindowMouseRect := TSDL_SetWindowMouseRect_proc(GetProcAddress(LibHandle, 'SDL_SetWindowMouseRect'));
        If Not assigned(SDL_SetWindowMouseRect) Then result := false;
        SDL_GetWindowMouseRect := TSDL_GetWindowMouseRect_func(GetProcAddress(LibHandle, 'SDL_GetWindowMouseRect'));
        If Not assigned(SDL_GetWindowMouseRect) Then result := false;
        SDL_GetGrabbedWindow := TSDL_GetGrabbedWindow_func(GetProcAddress(LibHandle, 'SDL_GetGrabbedWindow'));
        If Not assigned(SDL_GetGrabbedWindow) Then result := false;
        SDL_SetWindowBrightness := TSDL_SetWindowBrightness_func(GetProcAddress(LibHandle, 'SDL_SetWindowBrightness'));
        If Not assigned(SDL_SetWindowBrightness) Then result := false;
        SDL_GetWindowBrightness := TSDL_GetWindowBrightness_func(GetProcAddress(LibHandle, 'SDL_GetWindowBrightness'));
        If Not assigned(SDL_GetWindowBrightness) Then result := false;
        SDL_SetWindowOpacity := TSDL_SetWindowOpacity_func(GetProcAddress(LibHandle, 'SDL_SetWindowOpacity'));
        If Not assigned(SDL_SetWindowOpacity) Then result := false;
        SDL_GetWindowOpacity := TSDL_GetWindowOpacity_func(GetProcAddress(LibHandle, 'SDL_GetWindowOpacity'));
        If Not assigned(SDL_GetWindowOpacity) Then result := false;
        SDL_SetWindowModalFor := TSDL_SetWindowModalFor_func(GetProcAddress(LibHandle, 'SDL_SetWindowModalFor'));
        If Not assigned(SDL_SetWindowModalFor) Then result := false;
        SDL_SetWindowInputFocus := TSDL_SetWindowInputFocus_func(GetProcAddress(LibHandle, 'SDL_SetWindowInputFocus'));
        If Not assigned(SDL_SetWindowInputFocus) Then result := false;
        SDL_SetWindowGammaRamp := TSDL_SetWindowGammaRamp_func(GetProcAddress(LibHandle, 'SDL_SetWindowGammaRamp'));
        If Not assigned(SDL_SetWindowGammaRamp) Then result := false;
        SDL_GetWindowGammaRamp := TSDL_GetWindowGammaRamp_func(GetProcAddress(LibHandle, 'SDL_GetWindowGammaRamp'));
        If Not assigned(SDL_GetWindowGammaRamp) Then result := false;
        SDL_SetWindowHitTest := TSDL_SetWindowHitTest_func(GetProcAddress(LibHandle, 'SDL_SetWindowHitTest'));
        If Not assigned(SDL_SetWindowHitTest) Then result := false;
        SDL_FlashWindow := TSDL_FlashWindow_func(GetProcAddress(LibHandle, 'SDL_FlashWindow'));
        If Not assigned(SDL_FlashWindow) Then result := false;
        SDL_DestroyWindow := TSDL_DestroyWindow_proc(GetProcAddress(LibHandle, 'SDL_DestroyWindow'));
        If Not assigned(SDL_DestroyWindow) Then result := false;
        SDL_GL_LoadLibrary := TSDL_GL_LoadLibrary_func(GetProcAddress(LibHandle, 'SDL_GL_LoadLibrary'));
        If Not assigned(SDL_GL_LoadLibrary) Then result := false;
        SDL_GL_GetProcAddress := TSDL_GL_GetProcAddress_func(GetProcAddress(LibHandle, 'SDL_GL_GetProcAddress'));
        If Not assigned(SDL_GL_GetProcAddress) Then result := false;
        SDL_GL_ExtensionSupported := TSDL_GL_ExtensionSupported_func(GetProcAddress(LibHandle, 'SDL_GL_ExtensionSupported'));
        If Not assigned(SDL_GL_ExtensionSupported) Then result := false;
        SDL_GL_ResetAttributes := TSDL_GL_ResetAttributes_proc(GetProcAddress(LibHandle, 'SDL_GL_ResetAttributes'));
        If Not assigned(SDL_GL_ResetAttributes) Then result := false;
        SDL_GL_SetAttribute := TSDL_GL_SetAttribute_func(GetProcAddress(LibHandle, 'SDL_GL_SetAttribute'));
        If Not assigned(SDL_GL_SetAttribute) Then result := false;
        SDL_GL_GetAttribute := TSDL_GL_GetAttribute_func(GetProcAddress(LibHandle, 'SDL_GL_GetAttribute'));
        If Not assigned(SDL_GL_GetAttribute) Then result := false;
        SDL_GL_CreateContext := TSDL_GL_CreateContext_func(GetProcAddress(LibHandle, 'SDL_GL_CreateContext'));
        If Not assigned(SDL_GL_CreateContext) Then result := false;
        SDL_GL_MakeCurrent := TSDL_GL_MakeCurrent_func(GetProcAddress(LibHandle, 'SDL_GL_MakeCurrent'));
        If Not assigned(SDL_GL_MakeCurrent) Then result := false;
        SDL_GL_GetDrawableSize := TSDL_GL_GetDrawableSize_proc(GetProcAddress(LibHandle, 'SDL_GL_GetDrawableSize'));
        If Not assigned(SDL_GL_GetDrawableSize) Then result := false;
        SDL_GL_SetSwapInterval := TSDL_GL_SetSwapInterval_func(GetProcAddress(LibHandle, 'SDL_GL_SetSwapInterval'));
        If Not assigned(SDL_GL_SetSwapInterval) Then result := false;
        SDL_GL_SwapWindow := TSDL_GL_SwapWindow_proc(GetProcAddress(LibHandle, 'SDL_GL_SwapWindow'));
        If Not assigned(SDL_GL_SwapWindow) Then result := false;
        SDL_GL_DeleteContext := TSDL_GL_DeleteContext_proc(GetProcAddress(LibHandle, 'SDL_GL_DeleteContext'));
        If Not assigned(SDL_GL_DeleteContext) Then result := false;
        *)
  End;
  If Not result Then SDL_UnLoadLib();
End;

Procedure SDL_UnLoadLib();
Begin
  If LibHandle <> 0 Then Begin
    UnloadLibrary(LibHandle);
    LibHandle := 0;
  End;
End;
{$ENDIF}

